/* tslint:disable */
/* eslint-disable */
/**
 * API Hotel California
 * API de gestion de l\'hotel california
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'room_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'special_requests'?: string;
}
/**
 * 
 * @export
 * @interface ClientRequest
 */
export interface ClientRequest {
    /**
     * 
     * @type {string}
     * @memberof ClientRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequest
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequest
     */
    'room_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientRequest
     */
    'special_requests'?: string;
}
/**
 * 
 * @export
 * @interface MealType
 */
export interface MealType {
    /**
     * 
     * @type {number}
     * @memberof MealType
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MealType
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PaginatedClientList
 */
export interface PaginatedClientList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedClientList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedClientList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedClientList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Client>}
     * @memberof PaginatedClientList
     */
    'results': Array<Client>;
}
/**
 * 
 * @export
 * @interface PaginatedMealTypeList
 */
export interface PaginatedMealTypeList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMealTypeList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMealTypeList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMealTypeList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<MealType>}
     * @memberof PaginatedMealTypeList
     */
    'results': Array<MealType>;
}
/**
 * 
 * @export
 * @interface PaginatedReservationList
 */
export interface PaginatedReservationList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedReservationList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedReservationList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedReservationList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Reservation>}
     * @memberof PaginatedReservationList
     */
    'results': Array<Reservation>;
}
/**
 * 
 * @export
 * @interface PaginatedRestaurantList
 */
export interface PaginatedRestaurantList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedRestaurantList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedRestaurantList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedRestaurantList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Restaurant>}
     * @memberof PaginatedRestaurantList
     */
    'results': Array<Restaurant>;
}
/**
 * 
 * @export
 * @interface PatchedReservationRequest
 */
export interface PatchedReservationRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedReservationRequest
     */
    'client'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedReservationRequest
     */
    'restaurant'?: number;
    /**
     * Format de date attendu : YYYY-MM-DD
     * @type {string}
     * @memberof PatchedReservationRequest
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedReservationRequest
     */
    'meal'?: number;
    /**
     * Nombre de convives (entre 1 et 100)
     * @type {number}
     * @memberof PatchedReservationRequest
     */
    'number_of_guests'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedReservationRequest
     */
    'special_requests'?: string;
}
/**
 * 
 * @export
 * @interface Reservation
 */
export interface Reservation {
    /**
     * 
     * @type {number}
     * @memberof Reservation
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Reservation
     */
    'client': number;
    /**
     * 
     * @type {number}
     * @memberof Reservation
     */
    'restaurant': number;
    /**
     * Format de date attendu : YYYY-MM-DD
     * @type {string}
     * @memberof Reservation
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof Reservation
     */
    'meal': number;
    /**
     * Nombre de convives (entre 1 et 100)
     * @type {number}
     * @memberof Reservation
     */
    'number_of_guests': number;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    'special_requests'?: string;
}
/**
 * 
 * @export
 * @interface ReservationRequest
 */
export interface ReservationRequest {
    /**
     * 
     * @type {number}
     * @memberof ReservationRequest
     */
    'client': number;
    /**
     * 
     * @type {number}
     * @memberof ReservationRequest
     */
    'restaurant': number;
    /**
     * Format de date attendu : YYYY-MM-DD
     * @type {string}
     * @memberof ReservationRequest
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof ReservationRequest
     */
    'meal': number;
    /**
     * Nombre de convives (entre 1 et 100)
     * @type {number}
     * @memberof ReservationRequest
     */
    'number_of_guests': number;
    /**
     * 
     * @type {string}
     * @memberof ReservationRequest
     */
    'special_requests'?: string;
}
/**
 * 
 * @export
 * @interface Restaurant
 */
export interface Restaurant {
    /**
     * 
     * @type {number}
     * @memberof Restaurant
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Restaurant
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Restaurant
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof Restaurant
     */
    'capacity': number;
    /**
     * 
     * @type {string}
     * @memberof Restaurant
     */
    'opening_hours': string;
    /**
     * 
     * @type {string}
     * @memberof Restaurant
     */
    'location': string;
    /**
     * 
     * @type {boolean}
     * @memberof Restaurant
     */
    'is_active'?: boolean;
}
/**
 * 
 * @export
 * @interface Spa
 */
export interface Spa {
    /**
     * 
     * @type {number}
     * @memberof Spa
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Spa
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Spa
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Spa
     */
    'location': string;
    /**
     * 
     * @type {string}
     * @memberof Spa
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof Spa
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Spa
     */
    'opening_hours': string;
    /**
     * 
     * @type {string}
     * @memberof Spa
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Spa
     */
    'updated_at': string;
}

/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Créer un client
         * @summary Créer un client
         * @param {ClientRequest} clientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsCreate: async (clientRequest: ClientRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientRequest' is not null or undefined
            assertParamExists('clientsCreate', 'clientRequest', clientRequest)
            const localVarPath = `/api/clients/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Supprime un client
         * @summary Supprimer un client
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clientsDestroy', 'id', id)
            const localVarPath = `/api/clients/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rechercher un client
         * @summary Rechercher un client
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsList: async (page?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/clients/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retourne les informations détaillées d\'un client
         * @summary Détailler un client
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clientsRetrieve', 'id', id)
            const localVarPath = `/api/clients/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifie les informations d\'un client
         * @summary Modifier un client
         * @param {number} id 
         * @param {ClientRequest} clientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsUpdate: async (id: number, clientRequest: ClientRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clientsUpdate', 'id', id)
            // verify required parameter 'clientRequest' is not null or undefined
            assertParamExists('clientsUpdate', 'clientRequest', clientRequest)
            const localVarPath = `/api/clients/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientsApiAxiosParamCreator(configuration)
    return {
        /**
         * Créer un client
         * @summary Créer un client
         * @param {ClientRequest} clientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsCreate(clientRequest: ClientRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsCreate(clientRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.clientsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Supprime un client
         * @summary Supprimer un client
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.clientsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Rechercher un client
         * @summary Rechercher un client
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsList(page?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedClientList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsList(page, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.clientsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retourne les informations détaillées d\'un client
         * @summary Détailler un client
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.clientsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Modifie les informations d\'un client
         * @summary Modifier un client
         * @param {number} id 
         * @param {ClientRequest} clientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsUpdate(id: number, clientRequest: ClientRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsUpdate(id, clientRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.clientsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientsApiFp(configuration)
    return {
        /**
         * Créer un client
         * @summary Créer un client
         * @param {ClientsApiClientsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsCreate(requestParameters: ClientsApiClientsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Client> {
            return localVarFp.clientsCreate(requestParameters.clientRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Supprime un client
         * @summary Supprimer un client
         * @param {ClientsApiClientsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsDestroy(requestParameters: ClientsApiClientsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clientsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Rechercher un client
         * @summary Rechercher un client
         * @param {ClientsApiClientsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsList(requestParameters: ClientsApiClientsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedClientList> {
            return localVarFp.clientsList(requestParameters.page, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * Retourne les informations détaillées d\'un client
         * @summary Détailler un client
         * @param {ClientsApiClientsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsRetrieve(requestParameters: ClientsApiClientsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Client> {
            return localVarFp.clientsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifie les informations d\'un client
         * @summary Modifier un client
         * @param {ClientsApiClientsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsUpdate(requestParameters: ClientsApiClientsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Client> {
            return localVarFp.clientsUpdate(requestParameters.id, requestParameters.clientRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for clientsCreate operation in ClientsApi.
 * @export
 * @interface ClientsApiClientsCreateRequest
 */
export interface ClientsApiClientsCreateRequest {
    /**
     * 
     * @type {ClientRequest}
     * @memberof ClientsApiClientsCreate
     */
    readonly clientRequest: ClientRequest
}

/**
 * Request parameters for clientsDestroy operation in ClientsApi.
 * @export
 * @interface ClientsApiClientsDestroyRequest
 */
export interface ClientsApiClientsDestroyRequest {
    /**
     * 
     * @type {number}
     * @memberof ClientsApiClientsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for clientsList operation in ClientsApi.
 * @export
 * @interface ClientsApiClientsListRequest
 */
export interface ClientsApiClientsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof ClientsApiClientsList
     */
    readonly page?: number

    /**
     * A search term.
     * @type {string}
     * @memberof ClientsApiClientsList
     */
    readonly search?: string
}

/**
 * Request parameters for clientsRetrieve operation in ClientsApi.
 * @export
 * @interface ClientsApiClientsRetrieveRequest
 */
export interface ClientsApiClientsRetrieveRequest {
    /**
     * 
     * @type {number}
     * @memberof ClientsApiClientsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for clientsUpdate operation in ClientsApi.
 * @export
 * @interface ClientsApiClientsUpdateRequest
 */
export interface ClientsApiClientsUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof ClientsApiClientsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ClientRequest}
     * @memberof ClientsApiClientsUpdate
     */
    readonly clientRequest: ClientRequest
}

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * Créer un client
     * @summary Créer un client
     * @param {ClientsApiClientsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsCreate(requestParameters: ClientsApiClientsCreateRequest, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsCreate(requestParameters.clientRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Supprime un client
     * @summary Supprimer un client
     * @param {ClientsApiClientsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsDestroy(requestParameters: ClientsApiClientsDestroyRequest, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rechercher un client
     * @summary Rechercher un client
     * @param {ClientsApiClientsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsList(requestParameters: ClientsApiClientsListRequest = {}, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsList(requestParameters.page, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retourne les informations détaillées d\'un client
     * @summary Détailler un client
     * @param {ClientsApiClientsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsRetrieve(requestParameters: ClientsApiClientsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifie les informations d\'un client
     * @summary Modifier un client
     * @param {ClientsApiClientsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsUpdate(requestParameters: ClientsApiClientsUpdateRequest, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientsUpdate(requestParameters.id, requestParameters.clientRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootRetrieve(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rootRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootRetrieve(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MealsApi - axios parameter creator
 * @export
 */
export const MealsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retourne la liste des types de repas
         * @summary Lister les types de repas
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealsList: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/meals/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MealsApi - functional programming interface
 * @export
 */
export const MealsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MealsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retourne la liste des types de repas
         * @summary Lister les types de repas
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealsList(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMealTypeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealsList(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealsApi.mealsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MealsApi - factory interface
 * @export
 */
export const MealsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MealsApiFp(configuration)
    return {
        /**
         * Retourne la liste des types de repas
         * @summary Lister les types de repas
         * @param {MealsApiMealsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealsList(requestParameters: MealsApiMealsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedMealTypeList> {
            return localVarFp.mealsList(requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for mealsList operation in MealsApi.
 * @export
 * @interface MealsApiMealsListRequest
 */
export interface MealsApiMealsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof MealsApiMealsList
     */
    readonly page?: number
}

/**
 * MealsApi - object-oriented interface
 * @export
 * @class MealsApi
 * @extends {BaseAPI}
 */
export class MealsApi extends BaseAPI {
    /**
     * Retourne la liste des types de repas
     * @summary Lister les types de repas
     * @param {MealsApiMealsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealsApi
     */
    public mealsList(requestParameters: MealsApiMealsListRequest = {}, options?: RawAxiosRequestConfig) {
        return MealsApiFp(this.configuration).mealsList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReservationsApi - axios parameter creator
 * @export
 */
export const ReservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Crée une nouvelle réservation pour un restaurant
         * @summary Créer une nouvelle réservation
         * @param {ReservationRequest} reservationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsCreate: async (reservationRequest: ReservationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationRequest' is not null or undefined
            assertParamExists('reservationsCreate', 'reservationRequest', reservationRequest)
            const localVarPath = `/api/reservations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reservationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Supprime une reservation
         * @summary Supprimer une reservation
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reservationsDestroy', 'id', id)
            const localVarPath = `/api/reservations/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retourne la liste paginée des reservations répondant aux critères
         * @summary Lister les réservations
         * @param {number} [client] 
         * @param {string} [dateFrom] 
         * @param {string} [dateTo] 
         * @param {number} [meal] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [restaurant] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsList: async (client?: number, dateFrom?: string, dateTo?: string, meal?: number, page?: number, restaurant?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/reservations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (client !== undefined) {
                localVarQueryParameter['client'] = client;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString().substring(0,10) :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString().substring(0,10) :
                    dateTo;
            }

            if (meal !== undefined) {
                localVarQueryParameter['meal'] = meal;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (restaurant !== undefined) {
                localVarQueryParameter['restaurant'] = restaurant;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifie partiellement les informations d\'une reservation
         * @summary Modifier partiellement une reservation
         * @param {number} id 
         * @param {PatchedReservationRequest} [patchedReservationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsPartialUpdate: async (id: number, patchedReservationRequest?: PatchedReservationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reservationsPartialUpdate', 'id', id)
            const localVarPath = `/api/reservations/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedReservationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retourne les informations concernant une reservation
         * @summary Détailler une reservation
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reservationsRetrieve', 'id', id)
            const localVarPath = `/api/reservations/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifie les informations d\'une reservation
         * @summary Modifier une reservation
         * @param {number} id 
         * @param {ReservationRequest} reservationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsUpdate: async (id: number, reservationRequest: ReservationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reservationsUpdate', 'id', id)
            // verify required parameter 'reservationRequest' is not null or undefined
            assertParamExists('reservationsUpdate', 'reservationRequest', reservationRequest)
            const localVarPath = `/api/reservations/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reservationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReservationsApi - functional programming interface
 * @export
 */
export const ReservationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReservationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Crée une nouvelle réservation pour un restaurant
         * @summary Créer une nouvelle réservation
         * @param {ReservationRequest} reservationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationsCreate(reservationRequest: ReservationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reservation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationsCreate(reservationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Supprime une reservation
         * @summary Supprimer une reservation
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationsDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retourne la liste paginée des reservations répondant aux critères
         * @summary Lister les réservations
         * @param {number} [client] 
         * @param {string} [dateFrom] 
         * @param {string} [dateTo] 
         * @param {number} [meal] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [restaurant] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationsList(client?: number, dateFrom?: string, dateTo?: string, meal?: number, page?: number, restaurant?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedReservationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationsList(client, dateFrom, dateTo, meal, page, restaurant, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Modifie partiellement les informations d\'une reservation
         * @summary Modifier partiellement une reservation
         * @param {number} id 
         * @param {PatchedReservationRequest} [patchedReservationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationsPartialUpdate(id: number, patchedReservationRequest?: PatchedReservationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reservation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationsPartialUpdate(id, patchedReservationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retourne les informations concernant une reservation
         * @summary Détailler une reservation
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reservation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Modifie les informations d\'une reservation
         * @summary Modifier une reservation
         * @param {number} id 
         * @param {ReservationRequest} reservationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationsUpdate(id: number, reservationRequest: ReservationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reservation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationsUpdate(id, reservationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReservationsApi - factory interface
 * @export
 */
export const ReservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReservationsApiFp(configuration)
    return {
        /**
         * Crée une nouvelle réservation pour un restaurant
         * @summary Créer une nouvelle réservation
         * @param {ReservationsApiReservationsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsCreate(requestParameters: ReservationsApiReservationsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Reservation> {
            return localVarFp.reservationsCreate(requestParameters.reservationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Supprime une reservation
         * @summary Supprimer une reservation
         * @param {ReservationsApiReservationsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsDestroy(requestParameters: ReservationsApiReservationsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.reservationsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retourne la liste paginée des reservations répondant aux critères
         * @summary Lister les réservations
         * @param {ReservationsApiReservationsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsList(requestParameters: ReservationsApiReservationsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedReservationList> {
            return localVarFp.reservationsList(requestParameters.client, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.meal, requestParameters.page, requestParameters.restaurant, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifie partiellement les informations d\'une reservation
         * @summary Modifier partiellement une reservation
         * @param {ReservationsApiReservationsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsPartialUpdate(requestParameters: ReservationsApiReservationsPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Reservation> {
            return localVarFp.reservationsPartialUpdate(requestParameters.id, requestParameters.patchedReservationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retourne les informations concernant une reservation
         * @summary Détailler une reservation
         * @param {ReservationsApiReservationsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsRetrieve(requestParameters: ReservationsApiReservationsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Reservation> {
            return localVarFp.reservationsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifie les informations d\'une reservation
         * @summary Modifier une reservation
         * @param {ReservationsApiReservationsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationsUpdate(requestParameters: ReservationsApiReservationsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Reservation> {
            return localVarFp.reservationsUpdate(requestParameters.id, requestParameters.reservationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for reservationsCreate operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationsCreateRequest
 */
export interface ReservationsApiReservationsCreateRequest {
    /**
     * 
     * @type {ReservationRequest}
     * @memberof ReservationsApiReservationsCreate
     */
    readonly reservationRequest: ReservationRequest
}

/**
 * Request parameters for reservationsDestroy operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationsDestroyRequest
 */
export interface ReservationsApiReservationsDestroyRequest {
    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for reservationsList operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationsListRequest
 */
export interface ReservationsApiReservationsListRequest {
    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationsList
     */
    readonly client?: number

    /**
     * 
     * @type {string}
     * @memberof ReservationsApiReservationsList
     */
    readonly dateFrom?: string

    /**
     * 
     * @type {string}
     * @memberof ReservationsApiReservationsList
     */
    readonly dateTo?: string

    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationsList
     */
    readonly meal?: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof ReservationsApiReservationsList
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationsList
     */
    readonly restaurant?: number
}

/**
 * Request parameters for reservationsPartialUpdate operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationsPartialUpdateRequest
 */
export interface ReservationsApiReservationsPartialUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedReservationRequest}
     * @memberof ReservationsApiReservationsPartialUpdate
     */
    readonly patchedReservationRequest?: PatchedReservationRequest
}

/**
 * Request parameters for reservationsRetrieve operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationsRetrieveRequest
 */
export interface ReservationsApiReservationsRetrieveRequest {
    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for reservationsUpdate operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationsUpdateRequest
 */
export interface ReservationsApiReservationsUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ReservationRequest}
     * @memberof ReservationsApiReservationsUpdate
     */
    readonly reservationRequest: ReservationRequest
}

/**
 * ReservationsApi - object-oriented interface
 * @export
 * @class ReservationsApi
 * @extends {BaseAPI}
 */
export class ReservationsApi extends BaseAPI {
    /**
     * Crée une nouvelle réservation pour un restaurant
     * @summary Créer une nouvelle réservation
     * @param {ReservationsApiReservationsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationsCreate(requestParameters: ReservationsApiReservationsCreateRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationsCreate(requestParameters.reservationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Supprime une reservation
     * @summary Supprimer une reservation
     * @param {ReservationsApiReservationsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationsDestroy(requestParameters: ReservationsApiReservationsDestroyRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retourne la liste paginée des reservations répondant aux critères
     * @summary Lister les réservations
     * @param {ReservationsApiReservationsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationsList(requestParameters: ReservationsApiReservationsListRequest = {}, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationsList(requestParameters.client, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.meal, requestParameters.page, requestParameters.restaurant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifie partiellement les informations d\'une reservation
     * @summary Modifier partiellement une reservation
     * @param {ReservationsApiReservationsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationsPartialUpdate(requestParameters: ReservationsApiReservationsPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationsPartialUpdate(requestParameters.id, requestParameters.patchedReservationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retourne les informations concernant une reservation
     * @summary Détailler une reservation
     * @param {ReservationsApiReservationsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationsRetrieve(requestParameters: ReservationsApiReservationsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifie les informations d\'une reservation
     * @summary Modifier une reservation
     * @param {ReservationsApiReservationsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationsUpdate(requestParameters: ReservationsApiReservationsUpdateRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationsUpdate(requestParameters.id, requestParameters.reservationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RestaurantsApi - axios parameter creator
 * @export
 */
export const RestaurantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Liste tous les restaurants de l\'hôtel
         * @summary Lister tous les restaurants de l\'hôtel
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantsList: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/restaurants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestaurantsApi - functional programming interface
 * @export
 */
export const RestaurantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RestaurantsApiAxiosParamCreator(configuration)
    return {
        /**
         * Liste tous les restaurants de l\'hôtel
         * @summary Lister tous les restaurants de l\'hôtel
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantsList(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRestaurantList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantsList(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RestaurantsApi.restaurantsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RestaurantsApi - factory interface
 * @export
 */
export const RestaurantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RestaurantsApiFp(configuration)
    return {
        /**
         * Liste tous les restaurants de l\'hôtel
         * @summary Lister tous les restaurants de l\'hôtel
         * @param {RestaurantsApiRestaurantsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantsList(requestParameters: RestaurantsApiRestaurantsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedRestaurantList> {
            return localVarFp.restaurantsList(requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for restaurantsList operation in RestaurantsApi.
 * @export
 * @interface RestaurantsApiRestaurantsListRequest
 */
export interface RestaurantsApiRestaurantsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof RestaurantsApiRestaurantsList
     */
    readonly page?: number
}

/**
 * RestaurantsApi - object-oriented interface
 * @export
 * @class RestaurantsApi
 * @extends {BaseAPI}
 */
export class RestaurantsApi extends BaseAPI {
    /**
     * Liste tous les restaurants de l\'hôtel
     * @summary Lister tous les restaurants de l\'hôtel
     * @param {RestaurantsApiRestaurantsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public restaurantsList(requestParameters: RestaurantsApiRestaurantsListRequest = {}, options?: RawAxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).restaurantsList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SchemaApi - axios parameter creator
 * @export
 */
export const SchemaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {SchemaRetrieveFormatEnum} [format] 
         * @param {SchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve: async (format?: SchemaRetrieveFormatEnum, lang?: SchemaRetrieveLangEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchemaApi - functional programming interface
 * @export
 */
export const SchemaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchemaApiAxiosParamCreator(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {SchemaRetrieveFormatEnum} [format] 
         * @param {SchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schemaRetrieve(format?: SchemaRetrieveFormatEnum, lang?: SchemaRetrieveLangEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schemaRetrieve(format, lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchemaApi.schemaRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SchemaApi - factory interface
 * @export
 */
export const SchemaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchemaApiFp(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {SchemaApiSchemaRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve(requestParameters: SchemaApiSchemaRetrieveRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.schemaRetrieve(requestParameters.format, requestParameters.lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for schemaRetrieve operation in SchemaApi.
 * @export
 * @interface SchemaApiSchemaRetrieveRequest
 */
export interface SchemaApiSchemaRetrieveRequest {
    /**
     * 
     * @type {'json' | 'yaml'}
     * @memberof SchemaApiSchemaRetrieve
     */
    readonly format?: SchemaRetrieveFormatEnum

    /**
     * 
     * @type {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'}
     * @memberof SchemaApiSchemaRetrieve
     */
    readonly lang?: SchemaRetrieveLangEnum
}

/**
 * SchemaApi - object-oriented interface
 * @export
 * @class SchemaApi
 * @extends {BaseAPI}
 */
export class SchemaApi extends BaseAPI {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {SchemaApiSchemaRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    public schemaRetrieve(requestParameters: SchemaApiSchemaRetrieveRequest = {}, options?: RawAxiosRequestConfig) {
        return SchemaApiFp(this.configuration).schemaRetrieve(requestParameters.format, requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SchemaRetrieveFormatEnum = {
    Json: 'json',
    Yaml: 'yaml'
} as const;
export type SchemaRetrieveFormatEnum = typeof SchemaRetrieveFormatEnum[keyof typeof SchemaRetrieveFormatEnum];
/**
 * @export
 */
export const SchemaRetrieveLangEnum = {
    Af: 'af',
    Ar: 'ar',
    ArDz: 'ar-dz',
    Ast: 'ast',
    Az: 'az',
    Be: 'be',
    Bg: 'bg',
    Bn: 'bn',
    Br: 'br',
    Bs: 'bs',
    Ca: 'ca',
    Ckb: 'ckb',
    Cs: 'cs',
    Cy: 'cy',
    Da: 'da',
    De: 'de',
    Dsb: 'dsb',
    El: 'el',
    En: 'en',
    EnAu: 'en-au',
    EnGb: 'en-gb',
    Eo: 'eo',
    Es: 'es',
    EsAr: 'es-ar',
    EsCo: 'es-co',
    EsMx: 'es-mx',
    EsNi: 'es-ni',
    EsVe: 'es-ve',
    Et: 'et',
    Eu: 'eu',
    Fa: 'fa',
    Fi: 'fi',
    Fr: 'fr',
    Fy: 'fy',
    Ga: 'ga',
    Gd: 'gd',
    Gl: 'gl',
    He: 'he',
    Hi: 'hi',
    Hr: 'hr',
    Hsb: 'hsb',
    Hu: 'hu',
    Hy: 'hy',
    Ia: 'ia',
    Id: 'id',
    Ig: 'ig',
    Io: 'io',
    Is: 'is',
    It: 'it',
    Ja: 'ja',
    Ka: 'ka',
    Kab: 'kab',
    Kk: 'kk',
    Km: 'km',
    Kn: 'kn',
    Ko: 'ko',
    Ky: 'ky',
    Lb: 'lb',
    Lt: 'lt',
    Lv: 'lv',
    Mk: 'mk',
    Ml: 'ml',
    Mn: 'mn',
    Mr: 'mr',
    Ms: 'ms',
    My: 'my',
    Nb: 'nb',
    Ne: 'ne',
    Nl: 'nl',
    Nn: 'nn',
    Os: 'os',
    Pa: 'pa',
    Pl: 'pl',
    Pt: 'pt',
    PtBr: 'pt-br',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    Sq: 'sq',
    Sr: 'sr',
    SrLatn: 'sr-latn',
    Sv: 'sv',
    Sw: 'sw',
    Ta: 'ta',
    Te: 'te',
    Tg: 'tg',
    Th: 'th',
    Tk: 'tk',
    Tr: 'tr',
    Tt: 'tt',
    Udm: 'udm',
    Ug: 'ug',
    Uk: 'uk',
    Ur: 'ur',
    Uz: 'uz',
    Vi: 'vi',
    ZhHans: 'zh-hans',
    ZhHant: 'zh-hant'
} as const;
export type SchemaRetrieveLangEnum = typeof SchemaRetrieveLangEnum[keyof typeof SchemaRetrieveLangEnum];


/**
 * SpasApi - axios parameter creator
 * @export
 */
export const SpasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retourne la liste des spas
         * @summary Lister tous les spas de l\'hôtel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spasRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/spas/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpasApi - functional programming interface
 * @export
 */
export const SpasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpasApiAxiosParamCreator(configuration)
    return {
        /**
         * Retourne la liste des spas
         * @summary Lister tous les spas de l\'hôtel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spasRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Spa>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spasRetrieve(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpasApi.spasRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpasApi - factory interface
 * @export
 */
export const SpasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpasApiFp(configuration)
    return {
        /**
         * Retourne la liste des spas
         * @summary Lister tous les spas de l\'hôtel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spasRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<Spa> {
            return localVarFp.spasRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpasApi - object-oriented interface
 * @export
 * @class SpasApi
 * @extends {BaseAPI}
 */
export class SpasApi extends BaseAPI {
    /**
     * Retourne la liste des spas
     * @summary Lister tous les spas de l\'hôtel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpasApi
     */
    public spasRetrieve(options?: RawAxiosRequestConfig) {
        return SpasApiFp(this.configuration).spasRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}



