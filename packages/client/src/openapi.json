{
  "openapi": "3.0.0",
  "paths": {
    "/users": {
      "get": {
        "description": "Returns a paginated list of users",
        "operationId": "UserController_listUsers",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter users by name or email",
            "schema": {
              "example": "john",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUsersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Users not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "List all users",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "description": "Creates a new user",
        "operationId": "UserController_createUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create new user",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Returns a single user by ID",
        "operationId": "UserController_getUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get user by ID",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Updates an existing user",
        "operationId": "UserController_updateUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Update user",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "Deletes a user",
        "operationId": "UserController_deleteUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Delete user",
        "tags": [
          "Users"
        ]
      }
    },
    "/agents": {
      "get": {
        "operationId": "AgentController_test",
        "parameters": [
          {
            "name": "input",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Agent"
        ]
      }
    },
    "/agents/stream": {
      "get": {
        "operationId": "AgentController_testStream",
        "parameters": [
          {
            "name": "input",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Agent"
        ]
      }
    },
    "/reservations": {
      "get": {
        "description": "Returns a paginated list of reservations with optional filtering",
        "operationId": "ReservationController_listReservations",
        "parameters": [
          {
            "name": "clientId",
            "required": false,
            "in": "query",
            "description": "Filter by client ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "restaurantId",
            "required": false,
            "in": "query",
            "description": "Filter by restaurant ID",
            "schema": {
              "example": 2,
              "type": "number"
            }
          },
          {
            "name": "mealId",
            "required": false,
            "in": "query",
            "description": "Filter by meal type ID",
            "schema": {
              "example": 3,
              "type": "number"
            }
          },
          {
            "name": "dateFrom",
            "required": false,
            "in": "query",
            "description": "Start date for filtering (YYYY-MM-DD)",
            "schema": {
              "example": "2023-12-01",
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "required": false,
            "in": "query",
            "description": "End date for filtering (YYYY-MM-DD)",
            "schema": {
              "example": "2023-12-31",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reservations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReservationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "List reservations",
        "tags": [
          "Reservations"
        ]
      },
      "post": {
        "description": "Creates a new reservation",
        "operationId": "ReservationController_createReservation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReservationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reservation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create reservation",
        "tags": [
          "Reservations"
        ]
      }
    },
    "/reservations/{id}": {
      "get": {
        "description": "Returns a single reservation by ID",
        "operationId": "ReservationController_getReservation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Reservation ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reservation retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Reservation not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get reservation by ID",
        "tags": [
          "Reservations"
        ]
      },
      "put": {
        "description": "Completely replaces an existing reservation",
        "operationId": "ReservationController_replaceReservation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Reservation ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReservationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reservation updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Reservation not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Replace reservation",
        "tags": [
          "Reservations"
        ]
      },
      "patch": {
        "description": "Partially updates an existing reservation",
        "operationId": "ReservationController_updateReservation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Reservation ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchReservationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reservation updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Reservation not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Update reservation",
        "tags": [
          "Reservations"
        ]
      },
      "delete": {
        "description": "Deletes a reservation",
        "operationId": "ReservationController_deleteReservation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Reservation ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Reservation deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Reservation not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Delete reservation",
        "tags": [
          "Reservations"
        ]
      }
    },
    "/spa": {
      "get": {
        "description": "Returns information about the hotel spa including contact details and opening hours",
        "operationId": "SpaController_getSpa",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Spa information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Spa information not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get spa information",
        "tags": [
          "Spa"
        ]
      }
    },
    "/meals": {
      "get": {
        "description": "Returns a paginated list of meal types available at the hotel",
        "operationId": "MealController_listMealTypes",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meal types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMealResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "List meal types",
        "tags": [
          "Meals"
        ]
      }
    },
    "/restaurants": {
      "get": {
        "description": "Returns a paginated list of restaurants in the hotel",
        "operationId": "RestaurantController_listRestaurants",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restaurants retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRestaurantResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "List restaurants",
        "tags": [
          "Restaurants"
        ]
      }
    },
    "/ChatGateway/client:send-chat": {
      "post": {
        "tags": [
          "WebSocket Events (Client → Server)"
        ],
        "summary": "Send a chat",
        "operationId": "client:send-chat",
        "x-event": "client:send-chat",
        "x-namespace": "ChatGateway",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatClientSendChat"
              }
            }
          }
        },
        "responses": {}
      }
    },
    "/ChatGateway/client:ping": {
      "post": {
        "tags": [
          "WebSocket Events (Client → Server)"
        ],
        "summary": "Ping for connection testing",
        "operationId": "client:ping",
        "x-event": "client:ping",
        "x-namespace": "ChatGateway",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatClientPingDto"
              }
            }
          }
        },
        "responses": {}
      }
    },
    "/ChatGateway/server:pong": {
      "get": {
        "tags": [
          "WebSocket Events (Server → Client)"
        ],
        "summary": "Server emits a pong message to clients",
        "operationId": "server:pong",
        "x-event": "server:pong",
        "x-namespace": "ChatGateway",
        "responses": {
          "200": {
            "description": "Event payload for server:pong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatServerPongDto"
                }
              }
            }
          }
        }
      }
    },
    "/ChatGateway/server:send-chat": {
      "get": {
        "tags": [
          "WebSocket Events (Server → Client)"
        ],
        "summary": "Server emits a pong message to clients",
        "operationId": "server:send-chat",
        "x-event": "server:send-chat",
        "x-namespace": "ChatGateway",
        "responses": {
          "200": {
            "description": "Event payload for server:send-chat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatServerSendChat"
                }
              }
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "Brandon API",
    "description": "API docs for Brandon",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:3040",
      "description": "Local"
    }
  ],
  "components": {
    "schemas": {
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Unique identifier for the user",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The full name of the user",
            "example": "John Doe"
          },
          "phoneNumber": {
            "type": "string",
            "description": "User's phone number",
            "example": "+33612345678"
          },
          "roomNumber": {
            "type": "string",
            "description": "Room number if the user is a guest",
            "example": "101"
          },
          "specialRequests": {
            "type": "string",
            "description": "Any special requests or notes for this user",
            "example": "Requires vegetarian meals"
          }
        },
        "required": [
          "id",
          "name",
          "phoneNumber"
        ]
      },
      "PaginatedUsersResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Total number of users matching the criteria",
            "example": 100
          },
          "next": {
            "type": "object",
            "description": "URL to the next page",
            "example": "/api/users?page=2",
            "nullable": true
          },
          "previous": {
            "type": "object",
            "description": "URL to the previous page",
            "example": "/api/users?page=1",
            "nullable": true
          },
          "results": {
            "description": "List of user results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            }
          }
        },
        "required": [
          "count",
          "results"
        ]
      },
      "UserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The full name of the user",
            "example": "John Doe",
            "minLength": 2,
            "maxLength": 100
          },
          "phoneNumber": {
            "type": "string",
            "description": "User's phone number",
            "example": "+33612345678",
            "minLength": 10
          },
          "roomNumber": {
            "type": "string",
            "description": "Room number if the user is a guest",
            "example": "101"
          },
          "specialRequests": {
            "type": "string",
            "description": "Any special requests or notes for this user",
            "example": "Requires vegetarian meals"
          }
        },
        "required": [
          "name",
          "phoneNumber"
        ]
      },
      "ReservationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Unique identifier for the reservation",
            "example": 1
          },
          "clientId": {
            "type": "number",
            "description": "Client ID",
            "example": 1
          },
          "restaurantId": {
            "type": "number",
            "description": "Restaurant ID",
            "example": 2
          },
          "date": {
            "type": "string",
            "description": "Reservation date (YYYY-MM-DD)",
            "example": "2023-12-25"
          },
          "mealId": {
            "type": "number",
            "description": "Meal type ID (1: Breakfast, 2: Lunch, 3: Dinner, etc.)",
            "example": 3
          },
          "numberOfGuests": {
            "type": "number",
            "description": "Number of guests",
            "example": 4
          },
          "specialRequests": {
            "type": "string",
            "description": "Special requests or notes for the reservation",
            "example": "Window table preferred, celebrating anniversary"
          },
          "status": {
            "type": "string",
            "description": "Reservation status",
            "enum": [
              "confirmed",
              "pending",
              "cancelled"
            ],
            "example": "confirmed"
          }
        },
        "required": [
          "id",
          "clientId",
          "restaurantId",
          "date",
          "mealId",
          "numberOfGuests"
        ]
      },
      "PaginatedReservationResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Total number of reservations matching the criteria",
            "example": 42
          },
          "next": {
            "type": "object",
            "description": "URL to the next page",
            "example": "/api/reservations?page=2",
            "nullable": true
          },
          "previous": {
            "type": "object",
            "description": "URL to the previous page",
            "example": "/api/reservations?page=1",
            "nullable": true
          },
          "results": {
            "description": "List of reservation results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationResponse"
            }
          }
        },
        "required": [
          "count",
          "results"
        ]
      },
      "CreateReservationRequest": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "number",
            "description": "Client ID",
            "example": 1
          },
          "restaurantId": {
            "type": "number",
            "description": "Restaurant ID",
            "example": 2
          },
          "date": {
            "type": "string",
            "description": "Reservation date (YYYY-MM-DD)",
            "example": "2023-12-25"
          },
          "mealId": {
            "type": "number",
            "description": "Meal type ID (1: Breakfast, 2: Lunch, 3: Dinner, etc.)",
            "example": 3
          },
          "numberOfGuests": {
            "type": "number",
            "description": "Number of guests",
            "example": 4,
            "minimum": 1,
            "maximum": 100
          },
          "specialRequests": {
            "type": "string",
            "description": "Special requests or notes for the reservation",
            "example": "Window table preferred, celebrating anniversary"
          }
        },
        "required": [
          "clientId",
          "restaurantId",
          "date",
          "mealId",
          "numberOfGuests"
        ]
      },
      "UpdateReservationRequest": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "number",
            "description": "Client ID",
            "example": 1
          },
          "restaurantId": {
            "type": "number",
            "description": "Restaurant ID",
            "example": 2
          },
          "date": {
            "type": "string",
            "description": "Reservation date (YYYY-MM-DD)",
            "example": "2023-12-25"
          },
          "mealId": {
            "type": "number",
            "description": "Meal type ID (1: Breakfast, 2: Lunch, 3: Dinner, etc.)",
            "example": 3
          },
          "numberOfGuests": {
            "type": "number",
            "description": "Number of guests",
            "example": 4,
            "minimum": 1,
            "maximum": 100
          },
          "specialRequests": {
            "type": "string",
            "description": "Special requests or notes for the reservation",
            "example": "Window table preferred, celebrating anniversary"
          }
        },
        "required": [
          "clientId",
          "restaurantId",
          "date",
          "mealId",
          "numberOfGuests"
        ]
      },
      "PatchReservationRequest": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "number",
            "description": "Client ID",
            "example": 1
          },
          "restaurantId": {
            "type": "number",
            "description": "Restaurant ID",
            "example": 2
          },
          "date": {
            "type": "string",
            "description": "Reservation date (YYYY-MM-DD)",
            "example": "2023-12-25"
          },
          "mealId": {
            "type": "number",
            "description": "Meal type ID (1: Breakfast, 2: Lunch, 3: Dinner, etc.)",
            "example": 3
          },
          "numberOfGuests": {
            "type": "number",
            "description": "Number of guests",
            "example": 4,
            "minimum": 1,
            "maximum": 100
          },
          "specialRequests": {
            "type": "string",
            "description": "Special requests or notes for the reservation",
            "example": "Window table preferred, celebrating anniversary"
          },
          "status": {
            "type": "string",
            "description": "Reservation status",
            "enum": [
              "confirmed",
              "pending",
              "cancelled"
            ],
            "example": "confirmed"
          },
          "updateReason": {
            "type": "string",
            "description": "Reason for update",
            "example": "Guest requested a different date"
          },
          "notifyClient": {
            "type": "boolean",
            "description": "Whether to notify the client about changes",
            "example": true
          }
        }
      },
      "SpaResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Unique identifier for the spa",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the spa",
            "example": "Zen Garden Spa"
          },
          "description": {
            "type": "string",
            "description": "Description of the spa and its services",
            "example": "A luxurious spa offering a variety of treatments and massages for complete relaxation"
          },
          "location": {
            "type": "string",
            "description": "Physical location of the spa within the hotel",
            "example": "Ground Floor, East Wing"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Contact phone number for the spa",
            "example": "+33612345678"
          },
          "email": {
            "type": "string",
            "description": "Contact email for the spa",
            "example": "spa@hotelcalifornia.com"
          },
          "openingHours": {
            "type": "string",
            "description": "Spa opening hours",
            "example": "Mon-Sun: 9:00-20:00"
          },
          "createdAt": {
            "type": "string",
            "description": "Date when the spa information was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date when the spa information was last updated",
            "example": "2023-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "location",
          "phoneNumber",
          "email",
          "openingHours",
          "createdAt",
          "updatedAt"
        ]
      },
      "MealResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Unique identifier for the meal type",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the meal type",
            "example": "Breakfast"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "PaginatedMealResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Total number of meal types",
            "example": 4
          },
          "next": {
            "type": "object",
            "description": "URL to the next page",
            "example": "/api/meals?page=2",
            "nullable": true
          },
          "previous": {
            "type": "object",
            "description": "URL to the previous page",
            "example": "/api/meals?page=1",
            "nullable": true
          },
          "results": {
            "description": "List of meal type results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MealResponse"
            }
          }
        },
        "required": [
          "count",
          "results"
        ]
      },
      "RestaurantResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Unique identifier for the restaurant",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the restaurant",
            "example": "Le Bistro Californien"
          },
          "description": {
            "type": "string",
            "description": "Description of the restaurant",
            "example": "A cozy bistro offering California-inspired French cuisine"
          },
          "capacity": {
            "type": "number",
            "description": "Maximum number of guests the restaurant can accommodate",
            "example": 80
          },
          "openingHours": {
            "type": "string",
            "description": "Restaurant opening hours",
            "example": "Mon-Sun: 12:00-15:00, 19:00-23:00"
          },
          "location": {
            "type": "string",
            "description": "Physical location of the restaurant within the hotel",
            "example": "Ground Floor, West Wing"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the restaurant is currently active",
            "example": true
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "capacity",
          "openingHours",
          "location",
          "isActive"
        ]
      },
      "PaginatedRestaurantResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Total number of restaurants matching the criteria",
            "example": 5
          },
          "next": {
            "type": "object",
            "description": "URL to the next page",
            "example": "/api/restaurants?page=2",
            "nullable": true
          },
          "previous": {
            "type": "object",
            "description": "URL to the previous page",
            "example": "/api/restaurants?page=1",
            "nullable": true
          },
          "results": {
            "description": "List of restaurant results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestaurantResponse"
            }
          }
        },
        "required": [
          "count",
          "results"
        ]
      },
      "ChatClientSendChat": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "text"
          }
        },
        "required": [
          "text"
        ]
      },
      "ChatClientPingDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "client send ping"
          }
        },
        "required": [
          "message"
        ]
      },
      "ChatServerPongDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "server send pong"
          }
        },
        "required": [
          "message"
        ]
      },
      "ChatServerSendChat": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "text"
          }
        },
        "required": [
          "text"
        ]
      }
    }
  }
}