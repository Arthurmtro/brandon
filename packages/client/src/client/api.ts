/* tslint:disable */
/* eslint-disable */
/**
 * Brandon API
 * API docs for Brandon
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ChatClientPingDto
 */
export interface ChatClientPingDto {
    /**
     * client send ping
     * @type {string}
     * @memberof ChatClientPingDto
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ChatClientSendChat
 */
export interface ChatClientSendChat {
    /**
     * blablabla
     * @type {Array<string>}
     * @memberof ChatClientSendChat
     */
    'messages': Array<string>;
}
/**
 * 
 * @export
 * @interface ChatServerPongDto
 */
export interface ChatServerPongDto {
    /**
     * server send pong
     * @type {string}
     * @memberof ChatServerPongDto
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ClientResponse
 */
export interface ClientResponse {
    /**
     * Client ID
     * @type {number}
     * @memberof ClientResponse
     */
    'id': number;
    /**
     * Client name
     * @type {string}
     * @memberof ClientResponse
     */
    'name': string;
    /**
     * Client phone number
     * @type {string}
     * @memberof ClientResponse
     */
    'phone_number': string;
    /**
     * Client room number
     * @type {object}
     * @memberof ClientResponse
     */
    'room_number'?: object | null;
    /**
     * Client special requests
     * @type {string}
     * @memberof ClientResponse
     */
    'special_requests'?: string;
}
/**
 * 
 * @export
 * @interface MealTypeResponse
 */
export interface MealTypeResponse {
    /**
     * Meal type ID
     * @type {number}
     * @memberof MealTypeResponse
     */
    'id': number;
    /**
     * Meal type name
     * @type {string}
     * @memberof MealTypeResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PaginatedClientListResponse
 */
export interface PaginatedClientListResponse {
    /**
     * Total number of clients
     * @type {number}
     * @memberof PaginatedClientListResponse
     */
    'count': number;
    /**
     * URL to next page
     * @type {object}
     * @memberof PaginatedClientListResponse
     */
    'next'?: object | null;
    /**
     * URL to previous page
     * @type {object}
     * @memberof PaginatedClientListResponse
     */
    'previous'?: object | null;
    /**
     * List of clients
     * @type {Array<ClientResponse>}
     * @memberof PaginatedClientListResponse
     */
    'results': Array<ClientResponse>;
}
/**
 * 
 * @export
 * @interface PaginatedMealTypeListResponse
 */
export interface PaginatedMealTypeListResponse {
    /**
     * Total number of meal types
     * @type {number}
     * @memberof PaginatedMealTypeListResponse
     */
    'count': number;
    /**
     * URL to next page
     * @type {object}
     * @memberof PaginatedMealTypeListResponse
     */
    'next'?: object | null;
    /**
     * URL to previous page
     * @type {object}
     * @memberof PaginatedMealTypeListResponse
     */
    'previous'?: object | null;
    /**
     * List of meal types
     * @type {Array<MealTypeResponse>}
     * @memberof PaginatedMealTypeListResponse
     */
    'results': Array<MealTypeResponse>;
}
/**
 * 
 * @export
 * @interface PaginatedReservationListResponse
 */
export interface PaginatedReservationListResponse {
    /**
     * Total number of reservations
     * @type {number}
     * @memberof PaginatedReservationListResponse
     */
    'count': number;
    /**
     * URL to next page
     * @type {object}
     * @memberof PaginatedReservationListResponse
     */
    'next'?: object | null;
    /**
     * URL to previous page
     * @type {object}
     * @memberof PaginatedReservationListResponse
     */
    'previous'?: object | null;
    /**
     * List of reservations
     * @type {Array<ReservationResponse>}
     * @memberof PaginatedReservationListResponse
     */
    'results': Array<ReservationResponse>;
}
/**
 * 
 * @export
 * @interface PaginatedRestaurantListResponse
 */
export interface PaginatedRestaurantListResponse {
    /**
     * Total number of restaurants
     * @type {number}
     * @memberof PaginatedRestaurantListResponse
     */
    'count': number;
    /**
     * URL to next page
     * @type {object}
     * @memberof PaginatedRestaurantListResponse
     */
    'next'?: object | null;
    /**
     * URL to previous page
     * @type {object}
     * @memberof PaginatedRestaurantListResponse
     */
    'previous'?: object | null;
    /**
     * List of restaurants
     * @type {Array<RestaurantResponse>}
     * @memberof PaginatedRestaurantListResponse
     */
    'results': Array<RestaurantResponse>;
}
/**
 * 
 * @export
 * @interface ReservationResponse
 */
export interface ReservationResponse {
    /**
     * Reservation ID
     * @type {number}
     * @memberof ReservationResponse
     */
    'id': number;
    /**
     * Client ID
     * @type {number}
     * @memberof ReservationResponse
     */
    'client': number;
    /**
     * Restaurant ID
     * @type {number}
     * @memberof ReservationResponse
     */
    'restaurant': number;
    /**
     * Reservation date (YYYY-MM-DD)
     * @type {string}
     * @memberof ReservationResponse
     */
    'date': string;
    /**
     * Meal type ID
     * @type {number}
     * @memberof ReservationResponse
     */
    'meal': number;
    /**
     * Number of guests
     * @type {number}
     * @memberof ReservationResponse
     */
    'number_of_guests': number;
    /**
     * Special requests for the reservation
     * @type {string}
     * @memberof ReservationResponse
     */
    'special_requests'?: string;
}
/**
 * 
 * @export
 * @interface RestaurantResponse
 */
export interface RestaurantResponse {
    /**
     * Restaurant ID
     * @type {number}
     * @memberof RestaurantResponse
     */
    'id': number;
    /**
     * Restaurant name
     * @type {string}
     * @memberof RestaurantResponse
     */
    'name': string;
    /**
     * Restaurant description
     * @type {string}
     * @memberof RestaurantResponse
     */
    'description': string;
    /**
     * Restaurant capacity
     * @type {number}
     * @memberof RestaurantResponse
     */
    'capacity': number;
    /**
     * Restaurant opening hours
     * @type {string}
     * @memberof RestaurantResponse
     */
    'opening_hours': string;
    /**
     * Restaurant location
     * @type {string}
     * @memberof RestaurantResponse
     */
    'location': string;
    /**
     * Restaurant active status
     * @type {boolean}
     * @memberof RestaurantResponse
     */
    'is_active'?: boolean;
}
/**
 * 
 * @export
 * @interface SpaResponse
 */
export interface SpaResponse {
    /**
     * Spa ID
     * @type {number}
     * @memberof SpaResponse
     */
    'id': number;
    /**
     * Spa name
     * @type {string}
     * @memberof SpaResponse
     */
    'name': string;
    /**
     * Spa description
     * @type {string}
     * @memberof SpaResponse
     */
    'description': string;
    /**
     * Spa location
     * @type {string}
     * @memberof SpaResponse
     */
    'location': string;
    /**
     * Spa phone number
     * @type {string}
     * @memberof SpaResponse
     */
    'phone_number': string;
    /**
     * Spa email
     * @type {string}
     * @memberof SpaResponse
     */
    'email': string;
    /**
     * Spa opening hours
     * @type {string}
     * @memberof SpaResponse
     */
    'opening_hours': string;
    /**
     * Spa creation date
     * @type {string}
     * @memberof SpaResponse
     */
    'created_at': string;
    /**
     * Spa last update date
     * @type {string}
     * @memberof SpaResponse
     */
    'updated_at': string;
}

/**
 * MealsApi - axios parameter creator
 * @export
 */
export const MealsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Lister les types de repas
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealControllerListMealTypes: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/meals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MealsApi - functional programming interface
 * @export
 */
export const MealsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MealsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Lister les types de repas
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealControllerListMealTypes(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMealTypeListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealControllerListMealTypes(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealsApi.mealControllerListMealTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MealsApi - factory interface
 * @export
 */
export const MealsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MealsApiFp(configuration)
    return {
        /**
         * 
         * @summary Lister les types de repas
         * @param {MealsApiMealControllerListMealTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealControllerListMealTypes(requestParameters: MealsApiMealControllerListMealTypesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedMealTypeListResponse> {
            return localVarFp.mealControllerListMealTypes(requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for mealControllerListMealTypes operation in MealsApi.
 * @export
 * @interface MealsApiMealControllerListMealTypesRequest
 */
export interface MealsApiMealControllerListMealTypesRequest {
    /**
     * 
     * @type {number}
     * @memberof MealsApiMealControllerListMealTypes
     */
    readonly page?: number
}

/**
 * MealsApi - object-oriented interface
 * @export
 * @class MealsApi
 * @extends {BaseAPI}
 */
export class MealsApi extends BaseAPI {
    /**
     * 
     * @summary Lister les types de repas
     * @param {MealsApiMealControllerListMealTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealsApi
     */
    public mealControllerListMealTypes(requestParameters: MealsApiMealControllerListMealTypesRequest = {}, options?: RawAxiosRequestConfig) {
        return MealsApiFp(this.configuration).mealControllerListMealTypes(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReservationsApi - axios parameter creator
 * @export
 */
export const ReservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Créer une réservation
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerCreateReservation: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('reservationControllerCreateReservation', 'body', body)
            const localVarPath = `/reservations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Supprimer une réservation
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerDeleteReservation: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reservationControllerDeleteReservation', 'id', id)
            const localVarPath = `/reservations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Détailler une réservation
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerGetReservation: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reservationControllerGetReservation', 'id', id)
            const localVarPath = `/reservations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lister les réservations
         * @param {number} [page] 
         * @param {string} [dateTo] 
         * @param {string} [dateFrom] 
         * @param {number} [mealId] 
         * @param {number} [restaurantId] 
         * @param {number} [clientId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerListReservations: async (page?: number, dateTo?: string, dateFrom?: string, mealId?: number, restaurantId?: number, clientId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reservations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['dateTo'] = dateTo;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['dateFrom'] = dateFrom;
            }

            if (mealId !== undefined) {
                localVarQueryParameter['mealId'] = mealId;
            }

            if (restaurantId !== undefined) {
                localVarQueryParameter['restaurantId'] = restaurantId;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Modifier une réservation
         * @param {number} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerUpdateReservation: async (id: number, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reservationControllerUpdateReservation', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('reservationControllerUpdateReservation', 'body', body)
            const localVarPath = `/reservations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReservationsApi - functional programming interface
 * @export
 */
export const ReservationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReservationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Créer une réservation
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationControllerCreateReservation(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationControllerCreateReservation(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationControllerCreateReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Supprimer une réservation
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationControllerDeleteReservation(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationControllerDeleteReservation(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationControllerDeleteReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Détailler une réservation
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationControllerGetReservation(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationControllerGetReservation(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationControllerGetReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Lister les réservations
         * @param {number} [page] 
         * @param {string} [dateTo] 
         * @param {string} [dateFrom] 
         * @param {number} [mealId] 
         * @param {number} [restaurantId] 
         * @param {number} [clientId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationControllerListReservations(page?: number, dateTo?: string, dateFrom?: string, mealId?: number, restaurantId?: number, clientId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedReservationListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationControllerListReservations(page, dateTo, dateFrom, mealId, restaurantId, clientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationControllerListReservations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Modifier une réservation
         * @param {number} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationControllerUpdateReservation(id: number, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationControllerUpdateReservation(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationControllerUpdateReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReservationsApi - factory interface
 * @export
 */
export const ReservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReservationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Créer une réservation
         * @param {ReservationsApiReservationControllerCreateReservationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerCreateReservation(requestParameters: ReservationsApiReservationControllerCreateReservationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReservationResponse> {
            return localVarFp.reservationControllerCreateReservation(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Supprimer une réservation
         * @param {ReservationsApiReservationControllerDeleteReservationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerDeleteReservation(requestParameters: ReservationsApiReservationControllerDeleteReservationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.reservationControllerDeleteReservation(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Détailler une réservation
         * @param {ReservationsApiReservationControllerGetReservationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerGetReservation(requestParameters: ReservationsApiReservationControllerGetReservationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReservationResponse> {
            return localVarFp.reservationControllerGetReservation(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lister les réservations
         * @param {ReservationsApiReservationControllerListReservationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerListReservations(requestParameters: ReservationsApiReservationControllerListReservationsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedReservationListResponse> {
            return localVarFp.reservationControllerListReservations(requestParameters.page, requestParameters.dateTo, requestParameters.dateFrom, requestParameters.mealId, requestParameters.restaurantId, requestParameters.clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Modifier une réservation
         * @param {ReservationsApiReservationControllerUpdateReservationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerUpdateReservation(requestParameters: ReservationsApiReservationControllerUpdateReservationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReservationResponse> {
            return localVarFp.reservationControllerUpdateReservation(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for reservationControllerCreateReservation operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationControllerCreateReservationRequest
 */
export interface ReservationsApiReservationControllerCreateReservationRequest {
    /**
     * 
     * @type {object}
     * @memberof ReservationsApiReservationControllerCreateReservation
     */
    readonly body: object
}

/**
 * Request parameters for reservationControllerDeleteReservation operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationControllerDeleteReservationRequest
 */
export interface ReservationsApiReservationControllerDeleteReservationRequest {
    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationControllerDeleteReservation
     */
    readonly id: number
}

/**
 * Request parameters for reservationControllerGetReservation operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationControllerGetReservationRequest
 */
export interface ReservationsApiReservationControllerGetReservationRequest {
    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationControllerGetReservation
     */
    readonly id: number
}

/**
 * Request parameters for reservationControllerListReservations operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationControllerListReservationsRequest
 */
export interface ReservationsApiReservationControllerListReservationsRequest {
    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationControllerListReservations
     */
    readonly page?: number

    /**
     * 
     * @type {string}
     * @memberof ReservationsApiReservationControllerListReservations
     */
    readonly dateTo?: string

    /**
     * 
     * @type {string}
     * @memberof ReservationsApiReservationControllerListReservations
     */
    readonly dateFrom?: string

    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationControllerListReservations
     */
    readonly mealId?: number

    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationControllerListReservations
     */
    readonly restaurantId?: number

    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationControllerListReservations
     */
    readonly clientId?: number
}

/**
 * Request parameters for reservationControllerUpdateReservation operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationControllerUpdateReservationRequest
 */
export interface ReservationsApiReservationControllerUpdateReservationRequest {
    /**
     * 
     * @type {number}
     * @memberof ReservationsApiReservationControllerUpdateReservation
     */
    readonly id: number

    /**
     * 
     * @type {object}
     * @memberof ReservationsApiReservationControllerUpdateReservation
     */
    readonly body: object
}

/**
 * ReservationsApi - object-oriented interface
 * @export
 * @class ReservationsApi
 * @extends {BaseAPI}
 */
export class ReservationsApi extends BaseAPI {
    /**
     * 
     * @summary Créer une réservation
     * @param {ReservationsApiReservationControllerCreateReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationControllerCreateReservation(requestParameters: ReservationsApiReservationControllerCreateReservationRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationControllerCreateReservation(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Supprimer une réservation
     * @param {ReservationsApiReservationControllerDeleteReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationControllerDeleteReservation(requestParameters: ReservationsApiReservationControllerDeleteReservationRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationControllerDeleteReservation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Détailler une réservation
     * @param {ReservationsApiReservationControllerGetReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationControllerGetReservation(requestParameters: ReservationsApiReservationControllerGetReservationRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationControllerGetReservation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lister les réservations
     * @param {ReservationsApiReservationControllerListReservationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationControllerListReservations(requestParameters: ReservationsApiReservationControllerListReservationsRequest = {}, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationControllerListReservations(requestParameters.page, requestParameters.dateTo, requestParameters.dateFrom, requestParameters.mealId, requestParameters.restaurantId, requestParameters.clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Modifier une réservation
     * @param {ReservationsApiReservationControllerUpdateReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationControllerUpdateReservation(requestParameters: ReservationsApiReservationControllerUpdateReservationRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationControllerUpdateReservation(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RestaurantsApi - axios parameter creator
 * @export
 */
export const RestaurantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Détailler un restaurant
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantControllerGetRestaurant: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('restaurantControllerGetRestaurant', 'id', id)
            const localVarPath = `/restaurants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lister les restaurants
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantControllerListRestaurants: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/restaurants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestaurantsApi - functional programming interface
 * @export
 */
export const RestaurantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RestaurantsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Détailler un restaurant
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantControllerGetRestaurant(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestaurantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantControllerGetRestaurant(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RestaurantsApi.restaurantControllerGetRestaurant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Lister les restaurants
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantControllerListRestaurants(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRestaurantListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantControllerListRestaurants(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RestaurantsApi.restaurantControllerListRestaurants']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RestaurantsApi - factory interface
 * @export
 */
export const RestaurantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RestaurantsApiFp(configuration)
    return {
        /**
         * 
         * @summary Détailler un restaurant
         * @param {RestaurantsApiRestaurantControllerGetRestaurantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantControllerGetRestaurant(requestParameters: RestaurantsApiRestaurantControllerGetRestaurantRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestaurantResponse> {
            return localVarFp.restaurantControllerGetRestaurant(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lister les restaurants
         * @param {RestaurantsApiRestaurantControllerListRestaurantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantControllerListRestaurants(requestParameters: RestaurantsApiRestaurantControllerListRestaurantsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedRestaurantListResponse> {
            return localVarFp.restaurantControllerListRestaurants(requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for restaurantControllerGetRestaurant operation in RestaurantsApi.
 * @export
 * @interface RestaurantsApiRestaurantControllerGetRestaurantRequest
 */
export interface RestaurantsApiRestaurantControllerGetRestaurantRequest {
    /**
     * 
     * @type {number}
     * @memberof RestaurantsApiRestaurantControllerGetRestaurant
     */
    readonly id: number
}

/**
 * Request parameters for restaurantControllerListRestaurants operation in RestaurantsApi.
 * @export
 * @interface RestaurantsApiRestaurantControllerListRestaurantsRequest
 */
export interface RestaurantsApiRestaurantControllerListRestaurantsRequest {
    /**
     * 
     * @type {number}
     * @memberof RestaurantsApiRestaurantControllerListRestaurants
     */
    readonly page?: number
}

/**
 * RestaurantsApi - object-oriented interface
 * @export
 * @class RestaurantsApi
 * @extends {BaseAPI}
 */
export class RestaurantsApi extends BaseAPI {
    /**
     * 
     * @summary Détailler un restaurant
     * @param {RestaurantsApiRestaurantControllerGetRestaurantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public restaurantControllerGetRestaurant(requestParameters: RestaurantsApiRestaurantControllerGetRestaurantRequest, options?: RawAxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).restaurantControllerGetRestaurant(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lister les restaurants
     * @param {RestaurantsApiRestaurantControllerListRestaurantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public restaurantControllerListRestaurants(requestParameters: RestaurantsApiRestaurantControllerListRestaurantsRequest = {}, options?: RawAxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).restaurantControllerListRestaurants(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SpaApi - axios parameter creator
 * @export
 */
export const SpaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Obtenir les informations du spa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spaControllerGetSpaInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/spa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpaApi - functional programming interface
 * @export
 */
export const SpaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Obtenir les informations du spa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spaControllerGetSpaInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spaControllerGetSpaInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaApi.spaControllerGetSpaInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpaApi - factory interface
 * @export
 */
export const SpaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpaApiFp(configuration)
    return {
        /**
         * 
         * @summary Obtenir les informations du spa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spaControllerGetSpaInfo(options?: RawAxiosRequestConfig): AxiosPromise<SpaResponse> {
            return localVarFp.spaControllerGetSpaInfo(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpaApi - object-oriented interface
 * @export
 * @class SpaApi
 * @extends {BaseAPI}
 */
export class SpaApi extends BaseAPI {
    /**
     * 
     * @summary Obtenir les informations du spa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaApi
     */
    public spaControllerGetSpaInfo(options?: RawAxiosRequestConfig) {
        return SpaApiFp(this.configuration).spaControllerGetSpaInfo(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Créer un client
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreateClient: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userControllerCreateClient', 'body', body)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Supprimer un client
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteClient: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerDeleteClient', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Détailler un client
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetClientById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerGetClientById', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rechercher un client
         * @param {number} [page] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetClients: async (page?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Modifier un client
         * @param {number} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateClient: async (id: number, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerUpdateClient', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userControllerUpdateClient', 'body', body)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Créer un client
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerCreateClient(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerCreateClient(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerCreateClient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Supprimer un client
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerDeleteClient(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerDeleteClient(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerDeleteClient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Détailler un client
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetClientById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetClientById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerGetClientById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Rechercher un client
         * @param {number} [page] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetClients(page?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedClientListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetClients(page, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerGetClients']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Modifier un client
         * @param {number} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdateClient(id: number, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdateClient(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerUpdateClient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Créer un client
         * @param {UsersApiUserControllerCreateClientRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreateClient(requestParameters: UsersApiUserControllerCreateClientRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClientResponse> {
            return localVarFp.userControllerCreateClient(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Supprimer un client
         * @param {UsersApiUserControllerDeleteClientRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteClient(requestParameters: UsersApiUserControllerDeleteClientRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerDeleteClient(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Détailler un client
         * @param {UsersApiUserControllerGetClientByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetClientById(requestParameters: UsersApiUserControllerGetClientByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClientResponse> {
            return localVarFp.userControllerGetClientById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rechercher un client
         * @param {UsersApiUserControllerGetClientsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetClients(requestParameters: UsersApiUserControllerGetClientsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedClientListResponse> {
            return localVarFp.userControllerGetClients(requestParameters.page, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Modifier un client
         * @param {UsersApiUserControllerUpdateClientRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateClient(requestParameters: UsersApiUserControllerUpdateClientRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClientResponse> {
            return localVarFp.userControllerUpdateClient(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userControllerCreateClient operation in UsersApi.
 * @export
 * @interface UsersApiUserControllerCreateClientRequest
 */
export interface UsersApiUserControllerCreateClientRequest {
    /**
     * 
     * @type {object}
     * @memberof UsersApiUserControllerCreateClient
     */
    readonly body: object
}

/**
 * Request parameters for userControllerDeleteClient operation in UsersApi.
 * @export
 * @interface UsersApiUserControllerDeleteClientRequest
 */
export interface UsersApiUserControllerDeleteClientRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUserControllerDeleteClient
     */
    readonly id: number
}

/**
 * Request parameters for userControllerGetClientById operation in UsersApi.
 * @export
 * @interface UsersApiUserControllerGetClientByIdRequest
 */
export interface UsersApiUserControllerGetClientByIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUserControllerGetClientById
     */
    readonly id: number
}

/**
 * Request parameters for userControllerGetClients operation in UsersApi.
 * @export
 * @interface UsersApiUserControllerGetClientsRequest
 */
export interface UsersApiUserControllerGetClientsRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUserControllerGetClients
     */
    readonly page?: number

    /**
     * 
     * @type {string}
     * @memberof UsersApiUserControllerGetClients
     */
    readonly search?: string
}

/**
 * Request parameters for userControllerUpdateClient operation in UsersApi.
 * @export
 * @interface UsersApiUserControllerUpdateClientRequest
 */
export interface UsersApiUserControllerUpdateClientRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUserControllerUpdateClient
     */
    readonly id: number

    /**
     * 
     * @type {object}
     * @memberof UsersApiUserControllerUpdateClient
     */
    readonly body: object
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Créer un client
     * @param {UsersApiUserControllerCreateClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerCreateClient(requestParameters: UsersApiUserControllerCreateClientRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerCreateClient(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Supprimer un client
     * @param {UsersApiUserControllerDeleteClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerDeleteClient(requestParameters: UsersApiUserControllerDeleteClientRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerDeleteClient(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Détailler un client
     * @param {UsersApiUserControllerGetClientByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerGetClientById(requestParameters: UsersApiUserControllerGetClientByIdRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerGetClientById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rechercher un client
     * @param {UsersApiUserControllerGetClientsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerGetClients(requestParameters: UsersApiUserControllerGetClientsRequest = {}, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerGetClients(requestParameters.page, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Modifier un client
     * @param {UsersApiUserControllerUpdateClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerUpdateClient(requestParameters: UsersApiUserControllerUpdateClientRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerUpdateClient(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WebSocketEventsClientServerApi - axios parameter creator
 * @export
 */
export const WebSocketEventsClientServerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Ping for test
         * @param {ChatClientPingDto} [chatClientPingDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientPing: async (chatClientPingDto?: ChatClientPingDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ChatGateway/client:ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatClientPingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send a chat
         * @param {ChatClientSendChat} [chatClientSendChat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendChat: async (chatClientSendChat?: ChatClientSendChat, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ChatGateway/send-chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatClientSendChat, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebSocketEventsClientServerApi - functional programming interface
 * @export
 */
export const WebSocketEventsClientServerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebSocketEventsClientServerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Ping for test
         * @param {ChatClientPingDto} [chatClientPingDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientPing(chatClientPingDto?: ChatClientPingDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientPing(chatClientPingDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebSocketEventsClientServerApi.clientPing']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send a chat
         * @param {ChatClientSendChat} [chatClientSendChat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendChat(chatClientSendChat?: ChatClientSendChat, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendChat(chatClientSendChat, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebSocketEventsClientServerApi.sendChat']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebSocketEventsClientServerApi - factory interface
 * @export
 */
export const WebSocketEventsClientServerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebSocketEventsClientServerApiFp(configuration)
    return {
        /**
         * 
         * @summary Ping for test
         * @param {WebSocketEventsClientServerApiClientPingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientPing(requestParameters: WebSocketEventsClientServerApiClientPingRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clientPing(requestParameters.chatClientPingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send a chat
         * @param {WebSocketEventsClientServerApiSendChatRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendChat(requestParameters: WebSocketEventsClientServerApiSendChatRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendChat(requestParameters.chatClientSendChat, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for clientPing operation in WebSocketEventsClientServerApi.
 * @export
 * @interface WebSocketEventsClientServerApiClientPingRequest
 */
export interface WebSocketEventsClientServerApiClientPingRequest {
    /**
     * 
     * @type {ChatClientPingDto}
     * @memberof WebSocketEventsClientServerApiClientPing
     */
    readonly chatClientPingDto?: ChatClientPingDto
}

/**
 * Request parameters for sendChat operation in WebSocketEventsClientServerApi.
 * @export
 * @interface WebSocketEventsClientServerApiSendChatRequest
 */
export interface WebSocketEventsClientServerApiSendChatRequest {
    /**
     * 
     * @type {ChatClientSendChat}
     * @memberof WebSocketEventsClientServerApiSendChat
     */
    readonly chatClientSendChat?: ChatClientSendChat
}

/**
 * WebSocketEventsClientServerApi - object-oriented interface
 * @export
 * @class WebSocketEventsClientServerApi
 * @extends {BaseAPI}
 */
export class WebSocketEventsClientServerApi extends BaseAPI {
    /**
     * 
     * @summary Ping for test
     * @param {WebSocketEventsClientServerApiClientPingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebSocketEventsClientServerApi
     */
    public clientPing(requestParameters: WebSocketEventsClientServerApiClientPingRequest = {}, options?: RawAxiosRequestConfig) {
        return WebSocketEventsClientServerApiFp(this.configuration).clientPing(requestParameters.chatClientPingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send a chat
     * @param {WebSocketEventsClientServerApiSendChatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebSocketEventsClientServerApi
     */
    public sendChat(requestParameters: WebSocketEventsClientServerApiSendChatRequest = {}, options?: RawAxiosRequestConfig) {
        return WebSocketEventsClientServerApiFp(this.configuration).sendChat(requestParameters.chatClientSendChat, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WebSocketEventsServerClientApi - axios parameter creator
 * @export
 */
export const WebSocketEventsServerClientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Server emits a pong message to clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serverPong: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ChatGateway/server:pong`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebSocketEventsServerClientApi - functional programming interface
 * @export
 */
export const WebSocketEventsServerClientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebSocketEventsServerClientApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Server emits a pong message to clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serverPong(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatServerPongDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serverPong(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebSocketEventsServerClientApi.serverPong']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebSocketEventsServerClientApi - factory interface
 * @export
 */
export const WebSocketEventsServerClientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebSocketEventsServerClientApiFp(configuration)
    return {
        /**
         * 
         * @summary Server emits a pong message to clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serverPong(options?: RawAxiosRequestConfig): AxiosPromise<ChatServerPongDto> {
            return localVarFp.serverPong(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebSocketEventsServerClientApi - object-oriented interface
 * @export
 * @class WebSocketEventsServerClientApi
 * @extends {BaseAPI}
 */
export class WebSocketEventsServerClientApi extends BaseAPI {
    /**
     * 
     * @summary Server emits a pong message to clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebSocketEventsServerClientApi
     */
    public serverPong(options?: RawAxiosRequestConfig) {
        return WebSocketEventsServerClientApiFp(this.configuration).serverPong(options).then((request) => request(this.axios, this.basePath));
    }
}



