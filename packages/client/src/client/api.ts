/* tslint:disable */
/* eslint-disable */
/**
 * Brandon API
 * API docs for Brandon
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AiMessageDto
 */
export interface AiMessageDto {
    /**
     * text
     * @type {string}
     * @memberof AiMessageDto
     */
    'text': string;
    /**
     * role
     * @type {string}
     * @memberof AiMessageDto
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface ChatClientPingDto
 */
export interface ChatClientPingDto {
    /**
     * client send ping
     * @type {string}
     * @memberof ChatClientPingDto
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ChatClientSendChat
 */
export interface ChatClientSendChat {
    /**
     * blablabla
     * @type {Array<AiMessageDto>}
     * @memberof ChatClientSendChat
     */
    'messages': Array<AiMessageDto>;
}
/**
 * 
 * @export
 * @interface ChatServerPongDto
 */
export interface ChatServerPongDto {
    /**
     * server send pong
     * @type {string}
     * @memberof ChatServerPongDto
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface CreateReservationRequest
 */
export interface CreateReservationRequest {
    /**
     * Client ID
     * @type {number}
     * @memberof CreateReservationRequest
     */
    'clientId': number;
    /**
     * Restaurant ID
     * @type {number}
     * @memberof CreateReservationRequest
     */
    'restaurantId': number;
    /**
     * Reservation date (YYYY-MM-DD)
     * @type {string}
     * @memberof CreateReservationRequest
     */
    'date': string;
    /**
     * Meal type ID (1: Breakfast, 2: Lunch, 3: Dinner, etc.)
     * @type {number}
     * @memberof CreateReservationRequest
     */
    'mealId': number;
    /**
     * Number of guests
     * @type {number}
     * @memberof CreateReservationRequest
     */
    'numberOfGuests': number;
    /**
     * Special requests or notes for the reservation
     * @type {string}
     * @memberof CreateReservationRequest
     */
    'specialRequests'?: string;
}
/**
 * 
 * @export
 * @interface MealResponse
 */
export interface MealResponse {
    /**
     * Unique identifier for the meal type
     * @type {number}
     * @memberof MealResponse
     */
    'id': number;
    /**
     * Name of the meal type
     * @type {string}
     * @memberof MealResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PaginatedMealResponse
 */
export interface PaginatedMealResponse {
    /**
     * Total number of meal types
     * @type {number}
     * @memberof PaginatedMealResponse
     */
    'count': number;
    /**
     * URL to the next page
     * @type {object}
     * @memberof PaginatedMealResponse
     */
    'next'?: object | null;
    /**
     * URL to the previous page
     * @type {object}
     * @memberof PaginatedMealResponse
     */
    'previous'?: object | null;
    /**
     * List of meal type results
     * @type {Array<MealResponse>}
     * @memberof PaginatedMealResponse
     */
    'results': Array<MealResponse>;
}
/**
 * 
 * @export
 * @interface PaginatedReservationResponse
 */
export interface PaginatedReservationResponse {
    /**
     * Total number of reservations matching the criteria
     * @type {number}
     * @memberof PaginatedReservationResponse
     */
    'count': number;
    /**
     * URL to the next page
     * @type {object}
     * @memberof PaginatedReservationResponse
     */
    'next'?: object | null;
    /**
     * URL to the previous page
     * @type {object}
     * @memberof PaginatedReservationResponse
     */
    'previous'?: object | null;
    /**
     * List of reservation results
     * @type {Array<ReservationResponse>}
     * @memberof PaginatedReservationResponse
     */
    'results': Array<ReservationResponse>;
}
/**
 * 
 * @export
 * @interface PaginatedRestaurantResponse
 */
export interface PaginatedRestaurantResponse {
    /**
     * Total number of restaurants matching the criteria
     * @type {number}
     * @memberof PaginatedRestaurantResponse
     */
    'count': number;
    /**
     * URL to the next page
     * @type {object}
     * @memberof PaginatedRestaurantResponse
     */
    'next'?: object | null;
    /**
     * URL to the previous page
     * @type {object}
     * @memberof PaginatedRestaurantResponse
     */
    'previous'?: object | null;
    /**
     * List of restaurant results
     * @type {Array<RestaurantResponse>}
     * @memberof PaginatedRestaurantResponse
     */
    'results': Array<RestaurantResponse>;
}
/**
 * 
 * @export
 * @interface PaginatedUsersResponse
 */
export interface PaginatedUsersResponse {
    /**
     * Total number of users matching the criteria
     * @type {number}
     * @memberof PaginatedUsersResponse
     */
    'count': number;
    /**
     * URL to the next page
     * @type {object}
     * @memberof PaginatedUsersResponse
     */
    'next'?: object | null;
    /**
     * URL to the previous page
     * @type {object}
     * @memberof PaginatedUsersResponse
     */
    'previous'?: object | null;
    /**
     * List of user results
     * @type {Array<UserResponse>}
     * @memberof PaginatedUsersResponse
     */
    'results': Array<UserResponse>;
}
/**
 * 
 * @export
 * @interface PatchReservationRequest
 */
export interface PatchReservationRequest {
    /**
     * Client ID
     * @type {number}
     * @memberof PatchReservationRequest
     */
    'clientId'?: number;
    /**
     * Restaurant ID
     * @type {number}
     * @memberof PatchReservationRequest
     */
    'restaurantId'?: number;
    /**
     * Reservation date (YYYY-MM-DD)
     * @type {string}
     * @memberof PatchReservationRequest
     */
    'date'?: string;
    /**
     * Meal type ID (1: Breakfast, 2: Lunch, 3: Dinner, etc.)
     * @type {number}
     * @memberof PatchReservationRequest
     */
    'mealId'?: number;
    /**
     * Number of guests
     * @type {number}
     * @memberof PatchReservationRequest
     */
    'numberOfGuests'?: number;
    /**
     * Special requests or notes for the reservation
     * @type {string}
     * @memberof PatchReservationRequest
     */
    'specialRequests'?: string;
    /**
     * Reservation status
     * @type {string}
     * @memberof PatchReservationRequest
     */
    'status'?: PatchReservationRequestStatusEnum;
    /**
     * Reason for update
     * @type {string}
     * @memberof PatchReservationRequest
     */
    'updateReason'?: string;
    /**
     * Whether to notify the client about changes
     * @type {boolean}
     * @memberof PatchReservationRequest
     */
    'notifyClient'?: boolean;
}

export const PatchReservationRequestStatusEnum = {
    Confirmed: 'confirmed',
    Pending: 'pending',
    Cancelled: 'cancelled'
} as const;

export type PatchReservationRequestStatusEnum = typeof PatchReservationRequestStatusEnum[keyof typeof PatchReservationRequestStatusEnum];

/**
 * 
 * @export
 * @interface ReservationResponse
 */
export interface ReservationResponse {
    /**
     * Unique identifier for the reservation
     * @type {number}
     * @memberof ReservationResponse
     */
    'id': number;
    /**
     * Client ID
     * @type {number}
     * @memberof ReservationResponse
     */
    'clientId': number;
    /**
     * Restaurant ID
     * @type {number}
     * @memberof ReservationResponse
     */
    'restaurantId': number;
    /**
     * Reservation date (YYYY-MM-DD)
     * @type {string}
     * @memberof ReservationResponse
     */
    'date': string;
    /**
     * Meal type ID (1: Breakfast, 2: Lunch, 3: Dinner, etc.)
     * @type {number}
     * @memberof ReservationResponse
     */
    'mealId': number;
    /**
     * Number of guests
     * @type {number}
     * @memberof ReservationResponse
     */
    'numberOfGuests': number;
    /**
     * Special requests or notes for the reservation
     * @type {string}
     * @memberof ReservationResponse
     */
    'specialRequests'?: string;
    /**
     * Reservation status
     * @type {string}
     * @memberof ReservationResponse
     */
    'status'?: ReservationResponseStatusEnum;
}

export const ReservationResponseStatusEnum = {
    Confirmed: 'confirmed',
    Pending: 'pending',
    Cancelled: 'cancelled'
} as const;

export type ReservationResponseStatusEnum = typeof ReservationResponseStatusEnum[keyof typeof ReservationResponseStatusEnum];

/**
 * 
 * @export
 * @interface RestaurantResponse
 */
export interface RestaurantResponse {
    /**
     * Unique identifier for the restaurant
     * @type {number}
     * @memberof RestaurantResponse
     */
    'id': number;
    /**
     * Name of the restaurant
     * @type {string}
     * @memberof RestaurantResponse
     */
    'name': string;
    /**
     * Description of the restaurant
     * @type {string}
     * @memberof RestaurantResponse
     */
    'description': string;
    /**
     * Maximum number of guests the restaurant can accommodate
     * @type {number}
     * @memberof RestaurantResponse
     */
    'capacity': number;
    /**
     * Restaurant opening hours
     * @type {string}
     * @memberof RestaurantResponse
     */
    'openingHours': string;
    /**
     * Physical location of the restaurant within the hotel
     * @type {string}
     * @memberof RestaurantResponse
     */
    'location': string;
    /**
     * Whether the restaurant is currently active
     * @type {boolean}
     * @memberof RestaurantResponse
     */
    'isActive': boolean;
}
/**
 * 
 * @export
 * @interface SpaResponse
 */
export interface SpaResponse {
    /**
     * Unique identifier for the spa
     * @type {number}
     * @memberof SpaResponse
     */
    'id': number;
    /**
     * Name of the spa
     * @type {string}
     * @memberof SpaResponse
     */
    'name': string;
    /**
     * Description of the spa and its services
     * @type {string}
     * @memberof SpaResponse
     */
    'description': string;
    /**
     * Physical location of the spa within the hotel
     * @type {string}
     * @memberof SpaResponse
     */
    'location': string;
    /**
     * Contact phone number for the spa
     * @type {string}
     * @memberof SpaResponse
     */
    'phoneNumber': string;
    /**
     * Contact email for the spa
     * @type {string}
     * @memberof SpaResponse
     */
    'email': string;
    /**
     * Spa opening hours
     * @type {string}
     * @memberof SpaResponse
     */
    'openingHours': string;
    /**
     * Date when the spa information was created
     * @type {string}
     * @memberof SpaResponse
     */
    'createdAt': string;
    /**
     * Date when the spa information was last updated
     * @type {string}
     * @memberof SpaResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface UpdateReservationRequest
 */
export interface UpdateReservationRequest {
    /**
     * Client ID
     * @type {number}
     * @memberof UpdateReservationRequest
     */
    'clientId': number;
    /**
     * Restaurant ID
     * @type {number}
     * @memberof UpdateReservationRequest
     */
    'restaurantId': number;
    /**
     * Reservation date (YYYY-MM-DD)
     * @type {string}
     * @memberof UpdateReservationRequest
     */
    'date': string;
    /**
     * Meal type ID (1: Breakfast, 2: Lunch, 3: Dinner, etc.)
     * @type {number}
     * @memberof UpdateReservationRequest
     */
    'mealId': number;
    /**
     * Number of guests
     * @type {number}
     * @memberof UpdateReservationRequest
     */
    'numberOfGuests': number;
    /**
     * Special requests or notes for the reservation
     * @type {string}
     * @memberof UpdateReservationRequest
     */
    'specialRequests'?: string;
}
/**
 * 
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * The full name of the user
     * @type {string}
     * @memberof UserRequest
     */
    'name': string;
    /**
     * User\'s phone number
     * @type {string}
     * @memberof UserRequest
     */
    'phoneNumber': string;
    /**
     * Room number if the user is a guest
     * @type {string}
     * @memberof UserRequest
     */
    'roomNumber'?: string;
    /**
     * Any special requests or notes for this user
     * @type {string}
     * @memberof UserRequest
     */
    'specialRequests'?: string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * Unique identifier for the user
     * @type {number}
     * @memberof UserResponse
     */
    'id': number;
    /**
     * The full name of the user
     * @type {string}
     * @memberof UserResponse
     */
    'fullName': string;
    /**
     * User\'s phone number
     * @type {string}
     * @memberof UserResponse
     */
    'phoneNumber': string;
    /**
     * Room number if the user is a guest
     * @type {string}
     * @memberof UserResponse
     */
    'roomNumber'?: string;
    /**
     * Any special requests or notes for this user
     * @type {string}
     * @memberof UserResponse
     */
    'specialRequests'?: string;
}

/**
 * AgentApi - axios parameter creator
 * @export
 */
export const AgentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentControllerTest: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgentApi - functional programming interface
 * @export
 */
export const AgentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AgentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentControllerTest(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentControllerTest(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentApi.agentControllerTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AgentApi - factory interface
 * @export
 */
export const AgentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AgentApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentControllerTest(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.agentControllerTest(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AgentApi - object-oriented interface
 * @export
 * @class AgentApi
 * @extends {BaseAPI}
 */
export class AgentApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    public agentControllerTest(options?: RawAxiosRequestConfig) {
        return AgentApiFp(this.configuration).agentControllerTest(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MealsApi - axios parameter creator
 * @export
 */
export const MealsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a paginated list of meal types available at the hotel
         * @summary List meal types
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealControllerListMealTypes: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/meals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MealsApi - functional programming interface
 * @export
 */
export const MealsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MealsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a paginated list of meal types available at the hotel
         * @summary List meal types
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mealControllerListMealTypes(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mealControllerListMealTypes(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MealsApi.mealControllerListMealTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MealsApi - factory interface
 * @export
 */
export const MealsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MealsApiFp(configuration)
    return {
        /**
         * Returns a paginated list of meal types available at the hotel
         * @summary List meal types
         * @param {MealsApiMealControllerListMealTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mealControllerListMealTypes(requestParameters: MealsApiMealControllerListMealTypesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedMealResponse> {
            return localVarFp.mealControllerListMealTypes(requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for mealControllerListMealTypes operation in MealsApi.
 * @export
 * @interface MealsApiMealControllerListMealTypesRequest
 */
export interface MealsApiMealControllerListMealTypesRequest {
    /**
     * Page number for pagination
     * @type {number}
     * @memberof MealsApiMealControllerListMealTypes
     */
    readonly page?: number
}

/**
 * MealsApi - object-oriented interface
 * @export
 * @class MealsApi
 * @extends {BaseAPI}
 */
export class MealsApi extends BaseAPI {
    /**
     * Returns a paginated list of meal types available at the hotel
     * @summary List meal types
     * @param {MealsApiMealControllerListMealTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealsApi
     */
    public mealControllerListMealTypes(requestParameters: MealsApiMealControllerListMealTypesRequest = {}, options?: RawAxiosRequestConfig) {
        return MealsApiFp(this.configuration).mealControllerListMealTypes(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReservationsApi - axios parameter creator
 * @export
 */
export const ReservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new reservation
         * @summary Create reservation
         * @param {CreateReservationRequest} createReservationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerCreateReservation: async (createReservationRequest: CreateReservationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createReservationRequest' is not null or undefined
            assertParamExists('reservationControllerCreateReservation', 'createReservationRequest', createReservationRequest)
            const localVarPath = `/reservations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReservationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a reservation
         * @summary Delete reservation
         * @param {number} id Reservation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerDeleteReservation: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reservationControllerDeleteReservation', 'id', id)
            const localVarPath = `/reservations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single reservation by ID
         * @summary Get reservation by ID
         * @param {number} id Reservation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerGetReservation: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reservationControllerGetReservation', 'id', id)
            const localVarPath = `/reservations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of reservations with optional filtering
         * @summary List reservations
         * @param {number} [clientId] Filter by client ID
         * @param {number} [restaurantId] Filter by restaurant ID
         * @param {number} [mealId] Filter by meal type ID
         * @param {string} [dateFrom] Start date for filtering (YYYY-MM-DD)
         * @param {string} [dateTo] End date for filtering (YYYY-MM-DD)
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerListReservations: async (clientId?: number, restaurantId?: number, mealId?: number, dateFrom?: string, dateTo?: string, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reservations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (restaurantId !== undefined) {
                localVarQueryParameter['restaurantId'] = restaurantId;
            }

            if (mealId !== undefined) {
                localVarQueryParameter['mealId'] = mealId;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['dateFrom'] = dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['dateTo'] = dateTo;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Completely replaces an existing reservation
         * @summary Replace reservation
         * @param {number} id Reservation ID
         * @param {UpdateReservationRequest} updateReservationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerReplaceReservation: async (id: number, updateReservationRequest: UpdateReservationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reservationControllerReplaceReservation', 'id', id)
            // verify required parameter 'updateReservationRequest' is not null or undefined
            assertParamExists('reservationControllerReplaceReservation', 'updateReservationRequest', updateReservationRequest)
            const localVarPath = `/reservations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateReservationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates an existing reservation
         * @summary Update reservation
         * @param {number} id Reservation ID
         * @param {PatchReservationRequest} patchReservationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerUpdateReservation: async (id: number, patchReservationRequest: PatchReservationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reservationControllerUpdateReservation', 'id', id)
            // verify required parameter 'patchReservationRequest' is not null or undefined
            assertParamExists('reservationControllerUpdateReservation', 'patchReservationRequest', patchReservationRequest)
            const localVarPath = `/reservations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchReservationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReservationsApi - functional programming interface
 * @export
 */
export const ReservationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReservationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new reservation
         * @summary Create reservation
         * @param {CreateReservationRequest} createReservationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationControllerCreateReservation(createReservationRequest: CreateReservationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationControllerCreateReservation(createReservationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationControllerCreateReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a reservation
         * @summary Delete reservation
         * @param {number} id Reservation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationControllerDeleteReservation(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationControllerDeleteReservation(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationControllerDeleteReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a single reservation by ID
         * @summary Get reservation by ID
         * @param {number} id Reservation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationControllerGetReservation(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationControllerGetReservation(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationControllerGetReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a paginated list of reservations with optional filtering
         * @summary List reservations
         * @param {number} [clientId] Filter by client ID
         * @param {number} [restaurantId] Filter by restaurant ID
         * @param {number} [mealId] Filter by meal type ID
         * @param {string} [dateFrom] Start date for filtering (YYYY-MM-DD)
         * @param {string} [dateTo] End date for filtering (YYYY-MM-DD)
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationControllerListReservations(clientId?: number, restaurantId?: number, mealId?: number, dateFrom?: string, dateTo?: string, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationControllerListReservations(clientId, restaurantId, mealId, dateFrom, dateTo, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationControllerListReservations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Completely replaces an existing reservation
         * @summary Replace reservation
         * @param {number} id Reservation ID
         * @param {UpdateReservationRequest} updateReservationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationControllerReplaceReservation(id: number, updateReservationRequest: UpdateReservationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationControllerReplaceReservation(id, updateReservationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationControllerReplaceReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Partially updates an existing reservation
         * @summary Update reservation
         * @param {number} id Reservation ID
         * @param {PatchReservationRequest} patchReservationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationControllerUpdateReservation(id: number, patchReservationRequest: PatchReservationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservationControllerUpdateReservation(id, patchReservationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReservationsApi.reservationControllerUpdateReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReservationsApi - factory interface
 * @export
 */
export const ReservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReservationsApiFp(configuration)
    return {
        /**
         * Creates a new reservation
         * @summary Create reservation
         * @param {ReservationsApiReservationControllerCreateReservationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerCreateReservation(requestParameters: ReservationsApiReservationControllerCreateReservationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReservationResponse> {
            return localVarFp.reservationControllerCreateReservation(requestParameters.createReservationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a reservation
         * @summary Delete reservation
         * @param {ReservationsApiReservationControllerDeleteReservationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerDeleteReservation(requestParameters: ReservationsApiReservationControllerDeleteReservationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.reservationControllerDeleteReservation(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single reservation by ID
         * @summary Get reservation by ID
         * @param {ReservationsApiReservationControllerGetReservationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerGetReservation(requestParameters: ReservationsApiReservationControllerGetReservationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReservationResponse> {
            return localVarFp.reservationControllerGetReservation(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of reservations with optional filtering
         * @summary List reservations
         * @param {ReservationsApiReservationControllerListReservationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerListReservations(requestParameters: ReservationsApiReservationControllerListReservationsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedReservationResponse> {
            return localVarFp.reservationControllerListReservations(requestParameters.clientId, requestParameters.restaurantId, requestParameters.mealId, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Completely replaces an existing reservation
         * @summary Replace reservation
         * @param {ReservationsApiReservationControllerReplaceReservationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerReplaceReservation(requestParameters: ReservationsApiReservationControllerReplaceReservationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReservationResponse> {
            return localVarFp.reservationControllerReplaceReservation(requestParameters.id, requestParameters.updateReservationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates an existing reservation
         * @summary Update reservation
         * @param {ReservationsApiReservationControllerUpdateReservationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationControllerUpdateReservation(requestParameters: ReservationsApiReservationControllerUpdateReservationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReservationResponse> {
            return localVarFp.reservationControllerUpdateReservation(requestParameters.id, requestParameters.patchReservationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for reservationControllerCreateReservation operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationControllerCreateReservationRequest
 */
export interface ReservationsApiReservationControllerCreateReservationRequest {
    /**
     * 
     * @type {CreateReservationRequest}
     * @memberof ReservationsApiReservationControllerCreateReservation
     */
    readonly createReservationRequest: CreateReservationRequest
}

/**
 * Request parameters for reservationControllerDeleteReservation operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationControllerDeleteReservationRequest
 */
export interface ReservationsApiReservationControllerDeleteReservationRequest {
    /**
     * Reservation ID
     * @type {number}
     * @memberof ReservationsApiReservationControllerDeleteReservation
     */
    readonly id: number
}

/**
 * Request parameters for reservationControllerGetReservation operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationControllerGetReservationRequest
 */
export interface ReservationsApiReservationControllerGetReservationRequest {
    /**
     * Reservation ID
     * @type {number}
     * @memberof ReservationsApiReservationControllerGetReservation
     */
    readonly id: number
}

/**
 * Request parameters for reservationControllerListReservations operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationControllerListReservationsRequest
 */
export interface ReservationsApiReservationControllerListReservationsRequest {
    /**
     * Filter by client ID
     * @type {number}
     * @memberof ReservationsApiReservationControllerListReservations
     */
    readonly clientId?: number

    /**
     * Filter by restaurant ID
     * @type {number}
     * @memberof ReservationsApiReservationControllerListReservations
     */
    readonly restaurantId?: number

    /**
     * Filter by meal type ID
     * @type {number}
     * @memberof ReservationsApiReservationControllerListReservations
     */
    readonly mealId?: number

    /**
     * Start date for filtering (YYYY-MM-DD)
     * @type {string}
     * @memberof ReservationsApiReservationControllerListReservations
     */
    readonly dateFrom?: string

    /**
     * End date for filtering (YYYY-MM-DD)
     * @type {string}
     * @memberof ReservationsApiReservationControllerListReservations
     */
    readonly dateTo?: string

    /**
     * Page number for pagination
     * @type {number}
     * @memberof ReservationsApiReservationControllerListReservations
     */
    readonly page?: number
}

/**
 * Request parameters for reservationControllerReplaceReservation operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationControllerReplaceReservationRequest
 */
export interface ReservationsApiReservationControllerReplaceReservationRequest {
    /**
     * Reservation ID
     * @type {number}
     * @memberof ReservationsApiReservationControllerReplaceReservation
     */
    readonly id: number

    /**
     * 
     * @type {UpdateReservationRequest}
     * @memberof ReservationsApiReservationControllerReplaceReservation
     */
    readonly updateReservationRequest: UpdateReservationRequest
}

/**
 * Request parameters for reservationControllerUpdateReservation operation in ReservationsApi.
 * @export
 * @interface ReservationsApiReservationControllerUpdateReservationRequest
 */
export interface ReservationsApiReservationControllerUpdateReservationRequest {
    /**
     * Reservation ID
     * @type {number}
     * @memberof ReservationsApiReservationControllerUpdateReservation
     */
    readonly id: number

    /**
     * 
     * @type {PatchReservationRequest}
     * @memberof ReservationsApiReservationControllerUpdateReservation
     */
    readonly patchReservationRequest: PatchReservationRequest
}

/**
 * ReservationsApi - object-oriented interface
 * @export
 * @class ReservationsApi
 * @extends {BaseAPI}
 */
export class ReservationsApi extends BaseAPI {
    /**
     * Creates a new reservation
     * @summary Create reservation
     * @param {ReservationsApiReservationControllerCreateReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationControllerCreateReservation(requestParameters: ReservationsApiReservationControllerCreateReservationRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationControllerCreateReservation(requestParameters.createReservationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a reservation
     * @summary Delete reservation
     * @param {ReservationsApiReservationControllerDeleteReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationControllerDeleteReservation(requestParameters: ReservationsApiReservationControllerDeleteReservationRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationControllerDeleteReservation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single reservation by ID
     * @summary Get reservation by ID
     * @param {ReservationsApiReservationControllerGetReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationControllerGetReservation(requestParameters: ReservationsApiReservationControllerGetReservationRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationControllerGetReservation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of reservations with optional filtering
     * @summary List reservations
     * @param {ReservationsApiReservationControllerListReservationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationControllerListReservations(requestParameters: ReservationsApiReservationControllerListReservationsRequest = {}, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationControllerListReservations(requestParameters.clientId, requestParameters.restaurantId, requestParameters.mealId, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Completely replaces an existing reservation
     * @summary Replace reservation
     * @param {ReservationsApiReservationControllerReplaceReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationControllerReplaceReservation(requestParameters: ReservationsApiReservationControllerReplaceReservationRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationControllerReplaceReservation(requestParameters.id, requestParameters.updateReservationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates an existing reservation
     * @summary Update reservation
     * @param {ReservationsApiReservationControllerUpdateReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationsApi
     */
    public reservationControllerUpdateReservation(requestParameters: ReservationsApiReservationControllerUpdateReservationRequest, options?: RawAxiosRequestConfig) {
        return ReservationsApiFp(this.configuration).reservationControllerUpdateReservation(requestParameters.id, requestParameters.patchReservationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RestaurantsApi - axios parameter creator
 * @export
 */
export const RestaurantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a paginated list of restaurants in the hotel
         * @summary List restaurants
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantControllerListRestaurants: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/restaurants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestaurantsApi - functional programming interface
 * @export
 */
export const RestaurantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RestaurantsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a paginated list of restaurants in the hotel
         * @summary List restaurants
         * @param {number} [page] Page number for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restaurantControllerListRestaurants(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRestaurantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restaurantControllerListRestaurants(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RestaurantsApi.restaurantControllerListRestaurants']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RestaurantsApi - factory interface
 * @export
 */
export const RestaurantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RestaurantsApiFp(configuration)
    return {
        /**
         * Returns a paginated list of restaurants in the hotel
         * @summary List restaurants
         * @param {RestaurantsApiRestaurantControllerListRestaurantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restaurantControllerListRestaurants(requestParameters: RestaurantsApiRestaurantControllerListRestaurantsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedRestaurantResponse> {
            return localVarFp.restaurantControllerListRestaurants(requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for restaurantControllerListRestaurants operation in RestaurantsApi.
 * @export
 * @interface RestaurantsApiRestaurantControllerListRestaurantsRequest
 */
export interface RestaurantsApiRestaurantControllerListRestaurantsRequest {
    /**
     * Page number for pagination
     * @type {number}
     * @memberof RestaurantsApiRestaurantControllerListRestaurants
     */
    readonly page?: number
}

/**
 * RestaurantsApi - object-oriented interface
 * @export
 * @class RestaurantsApi
 * @extends {BaseAPI}
 */
export class RestaurantsApi extends BaseAPI {
    /**
     * Returns a paginated list of restaurants in the hotel
     * @summary List restaurants
     * @param {RestaurantsApiRestaurantControllerListRestaurantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public restaurantControllerListRestaurants(requestParameters: RestaurantsApiRestaurantControllerListRestaurantsRequest = {}, options?: RawAxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).restaurantControllerListRestaurants(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SpaApi - axios parameter creator
 * @export
 */
export const SpaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns information about the hotel spa including contact details and opening hours
         * @summary Get spa information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spaControllerGetSpa: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/spa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpaApi - functional programming interface
 * @export
 */
export const SpaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpaApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns information about the hotel spa including contact details and opening hours
         * @summary Get spa information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spaControllerGetSpa(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spaControllerGetSpa(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaApi.spaControllerGetSpa']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpaApi - factory interface
 * @export
 */
export const SpaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpaApiFp(configuration)
    return {
        /**
         * Returns information about the hotel spa including contact details and opening hours
         * @summary Get spa information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spaControllerGetSpa(options?: RawAxiosRequestConfig): AxiosPromise<SpaResponse> {
            return localVarFp.spaControllerGetSpa(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpaApi - object-oriented interface
 * @export
 * @class SpaApi
 * @extends {BaseAPI}
 */
export class SpaApi extends BaseAPI {
    /**
     * Returns information about the hotel spa including contact details and opening hours
     * @summary Get spa information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaApi
     */
    public spaControllerGetSpa(options?: RawAxiosRequestConfig) {
        return SpaApiFp(this.configuration).spaControllerGetSpa(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new user
         * @summary Create new user
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreateUser: async (userRequest: UserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRequest' is not null or undefined
            assertParamExists('userControllerCreateUser', 'userRequest', userRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a user
         * @summary Delete user
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteUser: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerDeleteUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single user by ID
         * @summary Get user by ID
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUser: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerGetUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of users
         * @summary List all users
         * @param {number} [page] Page number for pagination
         * @param {string} [search] Search term to filter users by name or email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerListUsers: async (page?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing user
         * @summary Update user
         * @param {number} id User ID
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateUser: async (id: number, userRequest: UserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerUpdateUser', 'id', id)
            // verify required parameter 'userRequest' is not null or undefined
            assertParamExists('userControllerUpdateUser', 'userRequest', userRequest)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new user
         * @summary Create new user
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerCreateUser(userRequest: UserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerCreateUser(userRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerCreateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a user
         * @summary Delete user
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerDeleteUser(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerDeleteUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerDeleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a single user by ID
         * @summary Get user by ID
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetUser(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerGetUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a paginated list of users
         * @summary List all users
         * @param {number} [page] Page number for pagination
         * @param {string} [search] Search term to filter users by name or email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerListUsers(page?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerListUsers(page, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerListUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an existing user
         * @summary Update user
         * @param {number} id User ID
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdateUser(id: number, userRequest: UserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdateUser(id, userRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerUpdateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Creates a new user
         * @summary Create new user
         * @param {UsersApiUserControllerCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreateUser(requestParameters: UsersApiUserControllerCreateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.userControllerCreateUser(requestParameters.userRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a user
         * @summary Delete user
         * @param {UsersApiUserControllerDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteUser(requestParameters: UsersApiUserControllerDeleteUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerDeleteUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single user by ID
         * @summary Get user by ID
         * @param {UsersApiUserControllerGetUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUser(requestParameters: UsersApiUserControllerGetUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.userControllerGetUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of users
         * @summary List all users
         * @param {UsersApiUserControllerListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerListUsers(requestParameters: UsersApiUserControllerListUsersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedUsersResponse> {
            return localVarFp.userControllerListUsers(requestParameters.page, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing user
         * @summary Update user
         * @param {UsersApiUserControllerUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateUser(requestParameters: UsersApiUserControllerUpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.userControllerUpdateUser(requestParameters.id, requestParameters.userRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userControllerCreateUser operation in UsersApi.
 * @export
 * @interface UsersApiUserControllerCreateUserRequest
 */
export interface UsersApiUserControllerCreateUserRequest {
    /**
     * 
     * @type {UserRequest}
     * @memberof UsersApiUserControllerCreateUser
     */
    readonly userRequest: UserRequest
}

/**
 * Request parameters for userControllerDeleteUser operation in UsersApi.
 * @export
 * @interface UsersApiUserControllerDeleteUserRequest
 */
export interface UsersApiUserControllerDeleteUserRequest {
    /**
     * User ID
     * @type {number}
     * @memberof UsersApiUserControllerDeleteUser
     */
    readonly id: number
}

/**
 * Request parameters for userControllerGetUser operation in UsersApi.
 * @export
 * @interface UsersApiUserControllerGetUserRequest
 */
export interface UsersApiUserControllerGetUserRequest {
    /**
     * User ID
     * @type {number}
     * @memberof UsersApiUserControllerGetUser
     */
    readonly id: number
}

/**
 * Request parameters for userControllerListUsers operation in UsersApi.
 * @export
 * @interface UsersApiUserControllerListUsersRequest
 */
export interface UsersApiUserControllerListUsersRequest {
    /**
     * Page number for pagination
     * @type {number}
     * @memberof UsersApiUserControllerListUsers
     */
    readonly page?: number

    /**
     * Search term to filter users by name or email
     * @type {string}
     * @memberof UsersApiUserControllerListUsers
     */
    readonly search?: string
}

/**
 * Request parameters for userControllerUpdateUser operation in UsersApi.
 * @export
 * @interface UsersApiUserControllerUpdateUserRequest
 */
export interface UsersApiUserControllerUpdateUserRequest {
    /**
     * User ID
     * @type {number}
     * @memberof UsersApiUserControllerUpdateUser
     */
    readonly id: number

    /**
     * 
     * @type {UserRequest}
     * @memberof UsersApiUserControllerUpdateUser
     */
    readonly userRequest: UserRequest
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Creates a new user
     * @summary Create new user
     * @param {UsersApiUserControllerCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerCreateUser(requestParameters: UsersApiUserControllerCreateUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerCreateUser(requestParameters.userRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a user
     * @summary Delete user
     * @param {UsersApiUserControllerDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerDeleteUser(requestParameters: UsersApiUserControllerDeleteUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerDeleteUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single user by ID
     * @summary Get user by ID
     * @param {UsersApiUserControllerGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerGetUser(requestParameters: UsersApiUserControllerGetUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerGetUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of users
     * @summary List all users
     * @param {UsersApiUserControllerListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerListUsers(requestParameters: UsersApiUserControllerListUsersRequest = {}, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerListUsers(requestParameters.page, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing user
     * @summary Update user
     * @param {UsersApiUserControllerUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerUpdateUser(requestParameters: UsersApiUserControllerUpdateUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerUpdateUser(requestParameters.id, requestParameters.userRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WebSocketEventsClientServerApi - axios parameter creator
 * @export
 */
export const WebSocketEventsClientServerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Ping for test
         * @param {ChatClientPingDto} [chatClientPingDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientPing: async (chatClientPingDto?: ChatClientPingDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ChatGateway/client:ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatClientPingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send a chat
         * @param {ChatClientSendChat} [chatClientSendChat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendChat: async (chatClientSendChat?: ChatClientSendChat, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ChatGateway/send-chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatClientSendChat, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebSocketEventsClientServerApi - functional programming interface
 * @export
 */
export const WebSocketEventsClientServerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebSocketEventsClientServerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Ping for test
         * @param {ChatClientPingDto} [chatClientPingDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientPing(chatClientPingDto?: ChatClientPingDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientPing(chatClientPingDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebSocketEventsClientServerApi.clientPing']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send a chat
         * @param {ChatClientSendChat} [chatClientSendChat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendChat(chatClientSendChat?: ChatClientSendChat, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendChat(chatClientSendChat, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebSocketEventsClientServerApi.sendChat']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebSocketEventsClientServerApi - factory interface
 * @export
 */
export const WebSocketEventsClientServerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebSocketEventsClientServerApiFp(configuration)
    return {
        /**
         * 
         * @summary Ping for test
         * @param {WebSocketEventsClientServerApiClientPingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientPing(requestParameters: WebSocketEventsClientServerApiClientPingRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clientPing(requestParameters.chatClientPingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send a chat
         * @param {WebSocketEventsClientServerApiSendChatRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendChat(requestParameters: WebSocketEventsClientServerApiSendChatRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendChat(requestParameters.chatClientSendChat, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for clientPing operation in WebSocketEventsClientServerApi.
 * @export
 * @interface WebSocketEventsClientServerApiClientPingRequest
 */
export interface WebSocketEventsClientServerApiClientPingRequest {
    /**
     * 
     * @type {ChatClientPingDto}
     * @memberof WebSocketEventsClientServerApiClientPing
     */
    readonly chatClientPingDto?: ChatClientPingDto
}

/**
 * Request parameters for sendChat operation in WebSocketEventsClientServerApi.
 * @export
 * @interface WebSocketEventsClientServerApiSendChatRequest
 */
export interface WebSocketEventsClientServerApiSendChatRequest {
    /**
     * 
     * @type {ChatClientSendChat}
     * @memberof WebSocketEventsClientServerApiSendChat
     */
    readonly chatClientSendChat?: ChatClientSendChat
}

/**
 * WebSocketEventsClientServerApi - object-oriented interface
 * @export
 * @class WebSocketEventsClientServerApi
 * @extends {BaseAPI}
 */
export class WebSocketEventsClientServerApi extends BaseAPI {
    /**
     * 
     * @summary Ping for test
     * @param {WebSocketEventsClientServerApiClientPingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebSocketEventsClientServerApi
     */
    public clientPing(requestParameters: WebSocketEventsClientServerApiClientPingRequest = {}, options?: RawAxiosRequestConfig) {
        return WebSocketEventsClientServerApiFp(this.configuration).clientPing(requestParameters.chatClientPingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send a chat
     * @param {WebSocketEventsClientServerApiSendChatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebSocketEventsClientServerApi
     */
    public sendChat(requestParameters: WebSocketEventsClientServerApiSendChatRequest = {}, options?: RawAxiosRequestConfig) {
        return WebSocketEventsClientServerApiFp(this.configuration).sendChat(requestParameters.chatClientSendChat, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WebSocketEventsServerClientApi - axios parameter creator
 * @export
 */
export const WebSocketEventsServerClientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Server emits a pong message to clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serverPong: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ChatGateway/server:pong`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebSocketEventsServerClientApi - functional programming interface
 * @export
 */
export const WebSocketEventsServerClientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebSocketEventsServerClientApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Server emits a pong message to clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serverPong(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatServerPongDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serverPong(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebSocketEventsServerClientApi.serverPong']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebSocketEventsServerClientApi - factory interface
 * @export
 */
export const WebSocketEventsServerClientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebSocketEventsServerClientApiFp(configuration)
    return {
        /**
         * 
         * @summary Server emits a pong message to clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serverPong(options?: RawAxiosRequestConfig): AxiosPromise<ChatServerPongDto> {
            return localVarFp.serverPong(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebSocketEventsServerClientApi - object-oriented interface
 * @export
 * @class WebSocketEventsServerClientApi
 * @extends {BaseAPI}
 */
export class WebSocketEventsServerClientApi extends BaseAPI {
    /**
     * 
     * @summary Server emits a pong message to clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebSocketEventsServerClientApi
     */
    public serverPong(options?: RawAxiosRequestConfig) {
        return WebSocketEventsServerClientApiFp(this.configuration).serverPong(options).then((request) => request(this.axios, this.basePath));
    }
}



